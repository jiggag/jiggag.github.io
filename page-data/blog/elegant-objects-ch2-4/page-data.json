{
    "componentChunkName": "component---src-pages-markdown-remark-frontmatter-slug-tsx",
    "path": "/blog/elegant-objects-ch2-4/",
    "result": {"data":{"markdownRemark":{"html":"<h2><code>유지보수를 위한 테스트 코드</code></h2>\n<h3><code>문서 보다 테스트</code></h3>\n<p>문서화는 유지보수에 도움을 주는 요소이다.</p>\n<p>이 메서드가 어떤 역할을 하는지 설명이 되어있다면\n도메인 지식이나 프로그래밍 언어, 알고리즘 등 얽혀있는 복잡한 코드를\n전부 이해하지 않아도 흐름을 이해할 수 있기 때문이다.</p>\n<p>그러나 결국 유지보수하는 것은 코드이다.\n복잡한 코드를 설명하기 위해 복잡한 문서가 필요하다면\n코드가 변경될 때 마다 복잡한 문서를 풀어서 다시 작성하는 일이 반복될 것이다.</p>\n<p>이것은 과연 유지보수를 위한 것일까?\n오히려 유지보수를 위해 코드 + 문서 작업이 추가되는 것은 아닐까?</p>\n<p>복잡하지 않은 코드, 단순하면서 의미가 명확한 코드는 문서가 추가적으로 필요하지 않다.\n그러나 메서드, 프로퍼티 네이밍이 명확하지 않다면 (나를 이야기하는 것 같다) 다른 사람에게 이것은 어떤 의미이다라는 것을 전달해주는 문서가 필요해진다.\n결국 설계가 제대로 되지 않았기 때문에 문서화가 불필요하게 작성되고 있다.</p>\n<p>한편으로는 복잡한 알고리즘을 요구하는 코드를 작성해야할때 네이밍을 <code>a, b, value...</code> 사용하고 문서를 남기는게 나을까? 생각이 들기도 한다.\n그러나 저런 명확하지 않은 네이밍은 결국 작성하고 있는 자신에게도 역할을 헷갈리게 만들고\n<code>같은 역할, 의미를 갖는 것이 이미 존재하는데 다시 만들어서 쓰는</code> 악순환을 발견할 수 있다...</p>\n<p>최상의 선택이 문서화 할 필요없이 코드 자체가 깔끔한 것이다.</p>\n<p>그럼 <code>깔끔한 코드</code>는 무엇일까?\n<code>이해하기 쉬운 코드 + 유지보수가 쉬운 코드 + 의미가 명확한 코드</code> 모두 맞는 것 같다.\n그리고 <code>오류를 찾기 쉬운 코드</code>라고 생각한다.</p>\n<p>모든 것이 매번 새로 작성되는 것이 아니라 유지보수를 더 많이 하게 되고 지금 객체지향의 목적도 유지보수를 위한 것이다.\n이렇게 수많은 유지보수를 하다보면 오류가 분명 있는데 찾기 어려운 코드가 있다.\n예를 들면 <a href=\"/blog/elegant-objects-ch2-3\">이전에 스터디했던 내용 중 <code>가변 객체</code></a> 를 사용한 경우 숨어있어서 찾기 어렵다...</p>\n<p>오류를 찾기 쉬우려면 어떻게 해야할까?\n무언가 원래 의도와 다르게 동작하고 있음을 빨리 캐치해야하는데, 이를 가장 쉽게 도와주는 것이 바로 <code>테스트 코드</code> 이다.</p>\n<p>가장 작은 단위로 테스트를 하는 의미로 <code>단위테스트</code>를 작성해서 클래스, 메서드, 함수 단위를 테스트하게 된다.</p>\n<p>테스트 코드로 그 함수의 역할, 기댓값 등을 미리 확인할 수 있기 때문에\n복잡한 문서화보다 오히려 동작하는 코드를 설명하는 가장 좋은 문서가 테스트 코드이다.</p>\n<p>다만 테스트 코드를 작성하는 것이 어려운 코드가 있을 수 있다.\n그것이 바로 복잡한 깔끔하지 못한 코드이다ㅠㅠ</p>\n<hr>\n<h3><code>Mock 보다 Fake</code></h3>\n<p>클래스, 함수 테스트 코드를 작성할때 <code>Mock</code>을 사용하고는 한다.\n테스트하려고 하는 클래스, 함수가 필요로하는 의존 객체를 모킹을 통해 전달하는 것이다.</p>\n<pre><code class=\"language-ts\">class TestClass {\n\tprivate other: OtherClass;\n\n\tconstructor(other: OtherClass) {\n\t\tthis.other = other;\n\t}\n\n  print() {\n    return this.other.name;\n  }\n}\n\nconst mockOther = new OtherClass();\n</code></pre>\n<p><code>TestClass</code>의 <code>print</code>를 테스트하려고 하는데 <code>OtherClass</code>가 필요하다.\n<code>new TestClass(mockOther)</code>처럼 <code>Mock</code>을 만들어서 <code>OtherClass</code>를 대신하게 한다.</p>\n<p>그러나 <code>OtherClass</code>가 또 다른 객체에 의존하고 있다면?\n모의 객체를 만들기 위해 의존 객체를 만들어야 하고 그 의존 객체를 만들기 위해 의존의 의존 객체를 만들어야하는 연쇄작업 이어진다. (배보다 배꼽이 커진다)</p>\n<pre><code class=\"language-ts\">... // 의존의 의존의 의존\nconst mockAnother = new AnotherClass(...);\nconst mockOther = new OtherClass(mockAnother);\n</code></pre>\n<p>그렇기 때문에 모의 객체보다는 페이크 객체를 사용하는 것을 추천한다.\n모의 객체와는 다르게 그 객체가 반환하는 것을 <code>Fake</code>로 만들어둔 객체이다.\n이렇게 하면 테스트를 더 짧게 만들 수 있기 때문에 유지보수성이 향상된다.</p>\n<pre><code class=\"language-ts\">const fakeOther: OtherClass = {\n\tname: 'fake',\n};\n</code></pre>\n<p><code>new TestClass(mockOther)</code>처럼 모의 객체를 만들어서 전달하는 것이 아닌\n<code>new TestClass(fakeOther)</code> 필요한 객체의 페이크 객체를 바로 전달하여 사용할 수 있게 되었다.\n(이게 내용이 헷갈리기 시작한다😱 Fake랑 Stub의 차이가 명확하게 보이지 않는다... Fake, Mock, Stub을 구분해서 만들어줄 수 있어야하겠다!)</p>\n<p>모킹을 이용하면 단위테스트가 쉽게 깨질 수 있다!\n실제로 테스트하려고 하는 대상이 변경된 것이 아니라면 단위테스트가 실패하면 안된다.\n<code>TestClass</code>를 테스트하려고 했는데 <code>OtherClass</code>의 무언가가 변경되었다고 <code>TestClass</code>의 테스트가 실패하면 안되는 것이다.</p>\n<p>하지만 모킹은 <code>TestClass</code>와 <code>OtherClass</code>를 결합한 형태이기 때문에 단위테스트가 실패할 수 밖에 없다.</p>\n<pre><code class=\"language-ts\">// 예를 들어 아래와 같은 OtherClass의 mock을 이용해 TestClass의 print를 테스트하고 있었다\nclass OtherClass {\n\tprivate name: string;\n\n\tconstructor(name: string) {\n\t\tthis.name = name;\n\t}\n}\n\nconst mockOther = new OtherClass(\"mock\");\nexpect(new TestClass(mockOther).print()).toBe(\"mock\");\n\n// 이때 OtherClass name을 아래처럼 변경한 경우 mock이 변경되면서 테스트를 실패하게 된다\nclass OtherClass {\n\tprivate name: string;\n\n\tconstructor(name: string) {\n\t\tthis.name = `[Other]${name}`;\n\t}\n}\n</code></pre>\n<p>의존하고 있는 모의 객체가 예전과 다르게 상태가 변경되었거나 생성되지 않았을 수 있기 때문이다.\n모킹은 <code>클래스 구현과 관련된 내부 로직을 테스트 코드와 강하게 결합</code>시켜서 오히려 유지보수, 리팩터링을 어렵게 만든다.</p>\n<p>모킹 대신 페이크를 이용해 약속된 결과값을 가져와서 테스트 했다면 정말 단순하게 동작한다.</p>\n<pre><code class=\"language-ts\">// 위의 예씨처럼 OtherClass의 생성자에서 name이 변경되더라도 fake 객체에서는 테스트가 깨지지 않는다\nconst fakeOther: OtherClass = {\n\tname: 'fake',\n};\nexpect(new TestClass(fakeOther).print()).toBe(\"fake\");\n</code></pre>\n<p>의존 대상이였던 <code>OtherClass</code>의 생성자가 변경되었더라고 <code>fake 객체</code>는 여전히 <code>OtherClass</code>를 반환하고 있을뿐이다.\n생성자 인자를 하나를 사용했거나 두개를 사용하는 것은 <code>OtherClass</code> 내부 로직에서 처리할 일이고 이를 호출하는 곳에서는 <code>OtherClass</code>만 있으면 된다.</p>\n<p><code>테스트가 코드의 내부 로직 구현에 관여를 하게 되면 오히려 테스트가 복잡해지고 유지보수가 어려워질뿐이다!</code></p>\n<hr>\n<h3><code>Mock, Fake, Stub</code></h3>\n<p><code>Mock Object</code>는 모의 객체를 만들어서 정말 객체 그 자체를 반환한다. 따라서 객체 의존성을 해결해주어야한다.</p>\n<p><code>Fake Object</code>는 객체의 <code>Mock</code>보다는 간소화?된 특정 몇몇 상태의 객체를 반환하는 <code>페이크</code>이다.</p>\n<p><code>Test Stub</code>은 특정 상태를 하드코딩한 객체 반환한다. 특정 상태로 고정되어 있기 때문에 액션에 따른 테스트가 어렵다.</p>\n<p>여러가지 조건에 따라 액션이 제한되고 반환되는 결과값을 테스트하기 위해\n각각 조건에 따른 결과값을 하드코딩으로 준비해두고 액션을 주는 테스트를 작성했었다.\n(수많은 하드코딩 + 중복된 코드의 화려한 결과물로 2000줄이 되었다... 테스트 코드도 리팩터링이 필요하다는 것을 이때 깨달았다)\n당시에는 이게 <code>Mock</code>라고 생각하고 사용했는데 지금 다시보니 <code>Stub</code>인가!</p>\n<p><a href=\"https://stackoverflow.com/questions/346372/whats-the-difference-between-faking-mocking-and-stubbing\">참고: Mock, Fake, Stub</a></p>\n<hr>\n<h3><code>짧은 인터페이스</code></h3>\n<p>클래스 하나의 응집도를 높이려면 클래스가 작게 유지되어야하고\n클래스를 작게 만들기 위해서는 인터페이스도 작아야한다.\n하나의 클래스에서는 여러개의 인터페이스를 구현할 수 있기 때문에 인터페이스는 정말 작아야한다!</p>\n<p>하나의 인터페이스에 너무 많은 역할을 담고 있게 하면\n그걸 구현하는 클래스에서는 응집도가 떨어질 수 밖에 없고 <code>단일 책임 원칙</code>에 어긋나게 된다.\n각각 독립된 함수는 독립된 인터페이스로 구현하도록 정의되어야한다.</p>\n<p>하지만 매우 밀접하게 연관된 인터페이스를 각각 독립된 상태로 만들기에는 오히려 너무 분산되는 느낌 아닐까?</p>\n<p>그래서 <code>스마트 클래스</code>(공유하는 인터페이스라고 생각한다)를 추가해서 해결할 수 있다.</p>\n<pre><code class=\"language-ts\">class Smart {\n  private origin: Exchange;\n  constructor(origin: Exchange) {\n    this.origin = origin;\n  }\n\ttoUsd() {\n    return this.origin.rate(\"usd\");\n  }\n  toEur() {\n    return this.origin.rate(\"eur\");\n  }\n}\n\ninterface Exchange {\n\trate(value: string): string;\n  smart(origin: Exchange): Smart;\n}\n\nclass Exchange {\n  rate(value: string) {\n    return value;\n  }\n  smart() {\n    return new Smart(this);\n  }\n}\n\nconst smart = new Exchange().smart();\nconsole.log(smart.toUsd()); // usd\nconsole.log(smart.toEur()); // eur\n</code></pre>\n<p>공통된 로직을 하나의 스마트 클래스로 분리하는 것이다.\n<code>Exchange</code> 안에 <code>Smart</code>클래스가 들어가 있는데 이는 공통된 클래스를 인터페이스와 함께 제공하기 위한 것이다.\n서로 다른 클래스에서 동일한 기능을 제공하고자 하는데, 공통된 로직을 계속 다시 구현하지 않도록 도와준다. (HOC 같은 느낌?)</p>\n<p>스마트 클래스에 계속 추가하게 된다면 이 클래스 자체가 커지게 되지만\n인터페이스의 응집도는 높은 상태로 작게 유지할 수 있고\n공통적으로 사용하는 것은 스마트 클래스에서 구현해둔 로직을 가져와서 사용할 수 있게 되었다.</p>\n<p><code>공통된 기능을 스마트 클래스로 추출하여 코드 중복을 피할 수 있고 인터페이스를 작게 유지할 수 있다</code></p>","frontmatter":{"slug":"/blog/elegant-objects-ch2-4","date":"2021년 9월 18일","title":"유지보수를 위해 문서 보다 테스트 코드를 작성하자"}}},"pageContext":{"id":"86dedefa-9991-5c42-8ac6-68e2b8917f84","frontmatter__slug":"/blog/elegant-objects-ch2-4","__params":{"frontmatter__slug":"blog"}}},
    "staticQueryHashes": ["3000541721","3293771174"]}