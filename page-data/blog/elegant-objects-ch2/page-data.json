{
    "componentChunkName": "component---src-pages-markdown-remark-frontmatter-slug-tsx",
    "path": "/blog/elegant-objects-ch2/",
    "result": {"data":{"markdownRemark":{"html":"<h2 id=\"작은-객체\" style=\"position:relative;\"><a href=\"#%EC%9E%91%EC%9D%80-%EA%B0%9D%EC%B2%B4\" aria-label=\"작은 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>작은 객체</h2>\n<h3 id=\"캡슐화는-작게-유지하자\" style=\"position:relative;\"><a href=\"#%EC%BA%A1%EC%8A%90%ED%99%94%EB%8A%94-%EC%9E%91%EA%B2%8C-%EC%9C%A0%EC%A7%80%ED%95%98%EC%9E%90\" aria-label=\"캡슐화는 작게 유지하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>캡슐화는 작게 유지하자</code></h3>\n<p>하나의 클래스에 많은 것을 담으려고 하다보면 클래스의 목적이 흐려지고 복잡성이 높아져 유지보수가 어려워진다.</p>\n<p>클래스 내부에 캡슐화된 모든 객체들이 객체의 식별자를 구성하는 요소이다.</p>\n<pre><code class=\"language-ts\">class Cash {\n\tprivate dollars?: number;\n  private cents?: number;\n  private currency?: string;\n}\n</code></pre>\n<p><code>Cash</code>클래스는 3개의 객체를 캡슐화하였고 이들이 <code>Cash</code>를 식별 가능하도록 해준다.\n객체는 단순히 이런 상태를 저장할 수 있는 <code>껍질</code>이라고 생각할 수 있고,\n각각의 상태(dollars, cents, currency)가 동일하더라도 생성된 객체마다 식별자는 다르기 때문이다.</p>\n<p>다양한 상태를 표현하기 위해 더 많은 상태를 캡슐화하여 사용하기도 한다.</p>\n<p>객체가 모여 더 큰 객체를 나타낼 수 있는데 하나의 객체에 모든 것을 담아둘 필요는 없기 때문에\n커다란 객체를 다시 그룹화하여 작은 객체로 분리한다면 하나의 클래스가 갖고 있는 객체의 수가 작아지도록 한다.</p>\n<hr>\n<h3 id=\"식별자\" style=\"position:relative;\"><a href=\"#%EC%8B%9D%EB%B3%84%EC%9E%90\" aria-label=\"식별자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>식별자?</code></h3>\n<p>계속 나오고 있는 상태와 식별자의 차이가 뭘까?</p>\n<p><code>Cash</code> 객체에 캡슐화된 <code>dollars, cents, currency</code>를 상태라고 생각했다.\n각각 어떤 값을 가지고 있고 그 값을 상태라고 볼 수 있다고 생각했기 때문이다.</p>\n<p>그럼 식별자는 무엇일까?</p>\n<p><code>객체를 식별한다</code>라는 말에서 받는 느낌으로는 무언가 유니크한 값인 것 같다.\n다른 객체와 구분할 수 있는 것으로 객체의 상태가 변경되어도 식별자를 통해 동일한 객체인지 확인할 수 있어야한다.</p>\n<p>값이라는 것은 식별자가 없기 때문에 값이 가지고 있는 상태를 통해 동등한 값인지 확인해야한다.\n그러나 객체는 상태가 변경될 수 있기 때문에 식별자를 통해 비교해야한다.</p>\n<pre><code>- 객체는 상태를 가지고 있으나 상태는 변경될 수 있다.\n- 객체의 행동을 통해 상태를 변경시킨다.\n- 객체는 어떤 상태에 있더라도 유일하게 식별할 수 있다.\n</code></pre>\n<p>(엘리스 책도 재밋게 봤었는데... 재밋게만 보고 기억하지 못해 또 이렇게 매일 새롭다)</p>\n<p><a href=\"https://ocwokocw.tistory.com/164\">참고: 객체지향의 사실과 오해 - 객체의 특징 (상태, 행동, 식별자)</a></p>\n<hr>\n<h3 id=\"그렇다면\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4\" aria-label=\"그렇다면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>그렇다면</code></h3>\n<p>그렇다면 왜 적은 캡슐화에서 식별자 이야기가 나왔을까?</p>\n<p>객체는 <code>객체들의 집합체</code>이다.</p>\n<p>객체에는 상태가 존재하고 집합체에서 그 상태를 이루는게 또 다른 객체이다.</p>\n<p>그럼 집합체를 구성하는 객체가 식별자이고, 그들이 집합을 이룬 상위 객체도 식별자이다.\n이런 흐름 속에서 상위 객체의 상태는 하위 객체이고, 하위 객체는 식별자니깐 상위 객체의 상태는 식별자라는 조건이 성립한다🙈</p>\n<p>내부에 캡슐화된 모든 객체들이 식별자를 구성하는 요소가 된다면 식별자가 많은 것이 좋은게 아닌가?</p>\n<p>물론 유니크한 객체를 위해서는 식별자가 많은게 좋다.\n하지만 캡슐화한 객체들을 그룹화할 수 있고 작은 컴포넌트로 만드는 것이 유지보수에도 좋고,\n각각의 객체가 말하고자 하는 목적이 명확해지기 때문에 최대한 그룹화하여 캡슐화되는 대상을 줄여보자</p>\n<p><code>적은 캡슐화로 클래스가 이야기하고자 했던 목적을 명확하게 유지하도록 하자</code></p>\n<hr>\n<h3 id=\"그래서\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C\" aria-label=\"그래서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>그래서</code></h3>\n<p>이번 챕터 초반에 <code>상태와 식별자</code>이야기가 나오고 나서 <code>적은 캡슐화와 식별자</code>를 무조건 연관지어서 생각하려고 했다.\n그렇게 도달한 질문은 <code>만약 많이 캡슐화된 객체를 사용한다면 과연 그렇게 생성된 인스턴스는 식별하기 쉬울까?</code>였다.</p>\n<p>그리고 지금 돌아보니 저 질문은 <code>식별의 포인트를 식별자를 통한 인스턴스 자체의 식별이 아니라 상태를 비교</code>하는 잘못된 개념으로 시작된 것 같다.\n상태와 식별자를 명확하게 구분하지 못해 생긴 문제이지 않을까😭</p>\n<p>처음에 내가 생각했던 <code>객체의 식별</code>은 <code>객체 상태 동등성 비교</code>였다.\n진정한 <code>객체의 식별</code>은 동일한 상태를 갖고 있는 객체를 식별할 수 있도록 <code>동일성 비교</code>를 해야한다.\n(내가 생각했던 식별의 개념(상태값 비교) !== 객체가 하고자 하는 식별(주소값 비교))</p>\n<p>그럼 <code>동일성 비교</code>는 어떻게 이뤄지는 것일까?</p>\n<p>객체가 갖고 있는 상태가 아니라 <code>주소값</code>을 비교하여 정말 동일한 객체인지 확인하는 것이다.\n같은 상태를 갖고 있을뿐 동일한 객체는 아닐 수 있고, 다른 상태를 갖고 있지만 동일한 객체일 수 있다.</p>\n<p>식별자는 주소값에 해당하고 상태를 얼마를 갖고 있는지와는 영향이 없다.\n식별자로써는 동일한 상태의 객체를 비교할 수 없기 때문에 <code>동일성</code> 비교를 위해서는 상태를 각각 확인해야한다.</p>\n<p>기존에 <code>===, ==</code>로는 동일성 비교가 되지 않아 <code>equals</code>라는 함수를 추가해보았다.</p>\n<pre><code class=\"language-ts\">class Rectangle {\n  private height?: number;\n\n  private width?: number;\n\n  constructor(width: number, height: number) {\n    this.height = height;\n    this.width = width;\n  }\n\n  equals(rect: Rectangle) {\n    return this.height === rect.height &#x26;&#x26; this.width === rect.width;\n  }\n}\n\nconst a = new Rectangle(1, 1);\nconst b = new Rectangle(1, 1);\nconsole.log(a === b); // false\nconsole.log(a == b); // false\nconsole.log(a.equals(b)); // true\n</code></pre>\n<p>같은 상태를 가지는 객체 비교를 위해 <code>equals</code>에서는 모든 캡슐화된 프로퍼티를 각각 비교해주고 있는데,\n만약 캡슐화가 큰 사이즈로 되어 있다면 이 조건이 점점 방대해질 것이다.</p>\n<p>근데 이게 이번 챕터에서 하고자 했던 이야기가 아닌 것 같다.......!\n이게 바로 한번의 스터디에서 여러가지 주제를 담으려 하다보니 목적이 흐려지는 <code>커다란 캡슐화</code>의 문제점이다</p>\n<hr>\n<h3 id=\"최소-1개는-캡슐화해야한다\" style=\"position:relative;\"><a href=\"#%EC%B5%9C%EC%86%8C-1%EA%B0%9C%EB%8A%94-%EC%BA%A1%EC%8A%90%ED%99%94%ED%95%B4%EC%95%BC%ED%95%9C%EB%8B%A4\" aria-label=\"최소 1개는 캡슐화해야한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>최소 1개는 캡슐화해야한다</code></h3>\n<p>앞에서 <code>적은 캡슐화</code>에서 알아본 <code>캡슐화된 객체 = 식별자</code>라는 것에 의하면 아무것도 캡슐화 하지 않은 것은 식별할 수 있는 무언가가 없기 때문에 생성된 객체는 동일하다.</p>\n<pre><code class=\"language-ts\">class Year {\n\tread() {\n    return new Date().toLocaleString();\n  }\n}\n</code></pre>\n<p>아무런 상태도 들어있지 않은 단순한 껍질을 인스턴스화 한 것 뿐이라 비어있는 껍질은 사용하지 않는 것이 좋다.\n프로퍼티가 없는 클래스는 정적 메서드와 동일해지는데, 이는 아무런 상태와 식별자도 가지 않고 있기에 오직 행동만을 하게 된다.\n위의 <code>Year</code>클래스를 인스턴스화 하지 않아도 <code>Year.read()</code>으로 호출해버리면 되기 때문이다😭\n(인스턴스를 생성과 실행을 분리하는 것이 의미가 없어진다)</p>\n<p>정적 메서드로 사용되는 부분을 생성자를 통해 전달하도록 하여 인스턴스 생성과 실행을 분리하였다.</p>\n<pre><code class=\"language-ts\">class Year {\n  private date?: string;\n\n  constructor(date: string) {\n    this.date = date;\n  }\n\n\tread() {\n    return this.date;\n  }\n}\n</code></pre>\n<p>캡슐화된 상태는 객체를 고유하게 식별할 수 있지만 아무것도 캡슐화하지 않은 객체는 식별할 수 있는 대상이 없다</p>\n<p><code>자기 자신을 식별할 수 있도록 다른 객체들을 캡슐화하여야 한다</code></p>\n<hr>\n<h3 id=\"인터페이스를-사용하자\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%9E%90\" aria-label=\"인터페이스를 사용하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>인터페이스를 사용하자</code></h3>\n<p>각각 객체가 어떤 역할을 하고 있는지 알려줄 수 있기 때문에 객체와 객체를 결합하는 것이 유용하게 사용된다.\n그러나 이런 결합도가 높아질수록 서로 연결된 객체를 수정하는 것은 조심스럽고 어떤 사이드이펙트가 있는지 알기 어렵기 때문에 유지보수에 어려움이 있다.</p>\n<p>따라서 상호작용하는 객체를 수정하지 않고도 해당 객체를 수정할 수 있도록 <code>분리 decouple</code> 해야 한다.</p>\n<p>방금까지 결합이 유용하게 사용된다고 했는데 다시 분리해야한다고?</p>\n<p>객체가 객체왁 결합하면 서로 변경하기 어려운 강한 결합이 생긴다.\n우선 각각의 객체가 따로 사용될 수 있고 결합된 형태로 사용될 수 있기 때문에 한쪽에서 구현이 변경되어야 한다면 강한 결합으로 의도하지 않은 동작을 하게 되는 어려움 발생한다.\n객체가 인터페이스와 먼저 결합된다면 변경사항으로 인해 누락되거나 의도와 다른 동작을 맞게 되는 일을 방지할 수 있다.</p>\n<pre><code class=\"language-ts\">interface Year {\n  read(): string;\n}\n\nclass A implements Year {\n  read(): string {\n    throw new Error(\"Method not implemented.\");\n  }\n}\n</code></pre>\n<p>클래스가 존재한다는 것은 다른 어디선가 이 클래스에 대한 객체를 사용하려고 하는 것이고,\n클래스 자체가 누군가에게는 인터페이스 역할을 하고 있다는 것이다.</p>\n<p>각각의 객체가 어떤 형태를 가지고 있고 어떤 역할을 하고 있는지 인터페이스를 통해 알 수 있다.</p>\n<p>인터페이스에 구현된 모든 public 메서드를 클래스에서 구현해야만 하기 때문에 안정성을 보장할 수 있는 이유이다.</p>\n<p>인터페이스를 참고하여 다른 객체에서 해당 클래스에 대한 로직을 구현하는데,\n만약 인터페이스에 구현된 퍼블릭 메서드를 누락하게 된다면 존재할 것이라 생각했던 상태나 동작이 의도와 다르게 문제가 발생할 수 있기 때문이다.</p>\n<p>인터페이스를 구현하는 클래스를 변경하고 싶다면 해당 인터페이스를 구현하고 있는 모든 클래스에서 변경이 되어야한다.\n이것이 결합도를 높이는 단점으로 보여지지만 인터페이스를 사용해서 <code>어디선가 구현이 변경되어 의도와 다르게 동작하는 문제</code>를 방지할 수 있는 장점으로 여겨진다.</p>","frontmatter":{"slug":"/blog/elegant-objects-ch2","date":"2021년 8월 24일","title":"캡슐화된 객체를 식별하기"}}},"pageContext":{"id":"e73d63e7-9082-593a-afa0-c291f70e74d9","frontmatter__slug":"/blog/elegant-objects-ch2","__params":{"frontmatter__slug":"blog"}}},
    "staticQueryHashes": ["3000541721","3293771174"]}