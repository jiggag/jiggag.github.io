{
    "componentChunkName": "component---src-pages-markdown-remark-frontmatter-slug-tsx",
    "path": "/blog/jiggag-domain/",
    "result": {"data":{"markdownRemark":{"html":"<p>항상 나만의 도메인을 갖고 싶다고 생각해왔는데 막상 <code>그 도메인을 어디에 연결하지?</code>하고 질문을 던졌을때 대답하지 못하여 구입을 미뤄두고 있었다.\n그러던 며칠전 큰맘먹고 나에게 주는 선물로 구입했다! 이 과정에는 최근에 재밋게 보고 있는 <a href=\"https://www.youtube.com/watch?v=t4-Aij_hTV4\">44bits 유튜브</a>가 큰 도움이 되었다.</p>\n<h4>도메인 구입</h4>\n<p>가비아, 닷홈, AWS... 여러 사이트를 찾아봤지만 역시 추천해주신대로 <a href=\"https://kr.godaddy.com/\">고대디</a>가 가장 저렴했다. 2년 구입을 선택하니 좀 더 저렴해지는 것 같아서 한번에 2년으로 결제했다.\n자꾸 뜬금없는 옵션이 추가될뻔했는데 이건 꼼꼼하게 읽어가면서 필요한 도메인만 딱 구입할 수 있었다.</p>\n<h4>네임서버, 레코드</h4>\n<p>지금 AWS EC2에 띄워둔 웹서버에 도메인을 연결해보고 싶어서 <code>AWS EC2니깐 네임서버도 Route53으로 가야겠지?</code>하면서 정말 아무런 의심없이 네임서버를 변경하였다...\n그리고 연결하고 하루이틀 지나보니 AWS 요금이 추가발생하고 있는게 너무 당황스러웠다. Route53도 비용이 발생하는건대!!!</p>\n<p>얼릉 고대디 네임서버로 원복하고 Route53 설정은 깔끔하게 지워주었다. 이 부분에서는 고대디에서 도메인을 구입하면 자동으로 네임서버가 설정되어있고 DNS 레코드만 추가해주면 되는 내용이였다.\n고대디에 기본적으로 www 호스트는 추가가 되어있었고 www의 레코드값인 <code>@</code>를 A타입 레코드로 서버IP를 연결하면 <a href=\"www.jiggag.com\"><code>www.jiggag.com</code></a>이라는 도메인이 <code>123.456.7.890</code>이라는 IP주소로 연결이 된다.</p>\n<p>아래는 현재 등록된 레코드의 일부 모습이다. 서브도메인으로 사용하려는 <code>board</code>도 같은 방식으로 추가해두었다.</p>\n<table>\n<thead>\n<tr>\n<th>레코드 타입</th>\n<th>호스트</th>\n<th>값</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>A</code></td>\n<td>@</td>\n<td>123.456.7.890</td>\n</tr>\n<tr>\n<td><code>A</code></td>\n<td>board</td>\n<td>123.456.7.890</td>\n</tr>\n<tr>\n<td><code>CNAME</code></td>\n<td>www</td>\n<td>@</td>\n</tr>\n</tbody>\n</table>\n<h4>가상호스트</h4>\n<p>하나의 서버에 포트로 여러 웹서버를 구분해서 띄울 수 있다. 1234포트는 공식 홈페이지라면 5678포트는 내부 관리용 사이트를 운영할 수 있다. 다만 각각 사이트 접속을 위해서 123.456.7.890:1234로 접속을 해야한다거나 도메인을 연결했어도 기본적으로 연결되는 80포트가 아닌 다른 포트는 <a href=\"http://www.abc.com:1234\">www.abc.com:1234</a> 이렇게 명시를 해줘야한다면 모든 사용자가 포트까지 알아야하는 아름답지 않은 상황이 연출된다.</p>\n<p>이에 포트별로 가상호스트를 설정하여 서브도메인으로 요청이 들어왔을때 해당 도메인의 요청을 프록시 하여 보내고자 하는 포트로 연결해주는 방법을 사용하였다. (IP:포트 호출 시 연결이 되어있는 상태에서 진행되었다.)</p>\n<p>우선 내가 사용하고 있는 아파치의 설정 파일을 열어서 가상호스트 설정을 추가해주었다.</p>\n<pre><code>sudo vi /etc/httpd/conf/httpd.conf\n</code></pre>\n<pre><code># httpd.conf 하단에 추가\nIncludeOptional conf.d/*.conf\n\n&#x3C;VirtualHost *:80>\n  ServerName www.jiggag.com\n  DocumentRoot /var/www/html\n&#x3C;/VirtualHost>\n&#x3C;VirtualHost *:80>\n  ServerName board.jiggag.com\n  DocumentRoot /var/www/board\n  Proxypass / http://127.0.0.1:1234/ nocanon\n  ProxyPassReverse / http://127.0.0.1:1234/\n  &#x3C;Proxy http://127.0.0.1:1234/*>\n    Order deny,allow\n    Allow from all\n  &#x3C;/Proxy>\n&#x3C;/VirtualHost>\n</code></pre>\n<p><code>IncludeOptional</code>으 가상호스트로 추가된 도메인 별로 설정파일을 분리해서 작성된 설정을 명시해주었다. 그 아래에 80포트로 접속하는 경우 기본 도메인(<code>www.jiggag.com</code>)과 서브도메인(<code>board.jiggag.com</code>)으로 접속했을때 보여줄 파일을 <code>DocumentRoot</code>에 각각 명시해주었으며 이제 서브도메인으로 접속 시 실제 연결되어야하는 포트로 프록시 설정을 추가 작성해주었다.</p>\n<p>그리고 가상호스트로 추가된 서브도메인 관련 설정파일을 위에 <code>IncludeOptional</code>에서 명시한 경로 아래에 해당 도메인명(<code>board.jiggag.com.conf</code>)으로 설정파일을 추가하였다. 그리고 이 설정파일은 해당 도메인이 연결되어있는 실제 포트와 파일 경로를 작성해주었다.</p>\n<pre><code>&#x3C;VirtualHost *:1234>\n  ServerName board.jiggag.com\n  DocumentRoot /var/www/board\n&#x3C;/VirtualHost>\n</code></pre>\n<h4>웹서버 restart/reload</h4>\n<p>설정에 오류가 없다면 웹서버를 재시작하고 해당 도메인에 접속하면 정상 연결된다.</p>\n<pre><code>sudo systemctl restart httpd\n</code></pre>\n<p>reload로 해도 설정값이 적용이 된다. 그럼 restart를 해서 기존 연결을 끊어버리는 것보다는 reload가 더 괜찮은 방법이 되지 않을까?</p>\n<h4>참고</h4>\n<p><a href=\"https://www.youtube.com/watch?v=t4-Aij_hTV4\">44bits 유튜브</a><br>\n<a href=\"https://blog.jiniworld.me/27#a03-2\">가상호스트 설정 블로그</a></p>","frontmatter":{"slug":"/blog/jiggag-domain","date":"2020년 8월 23일","title":"도메인을 구입했다"}}},"pageContext":{"id":"2dfa165d-0db2-5d75-9b63-c0699bfafed8","frontmatter__slug":"/blog/jiggag-domain","__params":{"frontmatter__slug":"blog"}}},
    "staticQueryHashes": ["3000541721","3293771174"]}