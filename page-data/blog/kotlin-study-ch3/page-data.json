{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/blog/kotlin-study-ch3/","result":{"data":{"markdownRemark":{"html":"<pre><code class=\"language-markdown\">[참고 도서]\n\n- 다재다능 코틀린 프로그래밍\n</code></pre>\n<h1 id=\"코틀린-함수\" style=\"position:relative;\"><a href=\"#%EC%BD%94%ED%8B%80%EB%A6%B0-%ED%95%A8%EC%88%98\" aria-label=\"코틀린 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코틀린 함수</h1>\n<ul>\n<li>재사용 할 수 있는 단위가 클래스인 자바와 다르게 코틀린에서는 단독 함수까지 재사용 가능하다</li>\n<li>필요할 때마다 사용할 수 있도록 단독으로 작고 단순한 함수를 만들었다\n<ul>\n<li>클래스의 메소드로 만들어지는 것이 아닌 <strong>단독으로 호출되는 함수</strong>를 만든다</li>\n<li>탑 레벨 단독 함수를 만들어서 함수형, 객체지향 모두 사용 가능하다</li>\n</ul>\n</li>\n<li>모든 파라미터를 전달하지 않고 기본 파라미터를 전달한다\n<ul>\n<li>함수와 메소드 확장을 쉽게 해준다</li>\n<li>인자에 이름을 명시하여 가독성과 가변적으로 파라미터를 전달할 수 있게 되었다</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"함수-생성\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-%EC%83%9D%EC%84%B1\" aria-label=\"함수 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 생성</h1>\n<h2 id=\"단일표현함수\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%9D%BC%ED%91%9C%ED%98%84%ED%95%A8%EC%88%98\" aria-label=\"단일표현함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단일표현함수</h2>\n<ul>\n<li>\n<p>함수를 블록으로 감싸는 대신 등호로 함수 정의와 바디를 구분하여 짧게 표현할 수 있다</p>\n<pre><code class=\"language-kotlin\">fun greetBlock(): String {\n\treturn \"hello\"\n}\n\n// 단일표현함수\nfun greet() = \"hello\"\nprintln(greet())\n</code></pre>\n</li>\n<li>\n<p>단일표현함수에서는 리턴 타입이 컴파일 단계에서 추론이 가능하다</p>\n<ul>\n<li>코틀린이 컨텍스트에 기반해 리턴 타입을 추론하며 타입이 다른 변수에 할당하려고 하면 컴파일 오류가 발생한다</li>\n<li>타입이 추론되지만 리턴 타입을 명시하여 구현(implement)에 의해 다른 타입으로 변경되는 것을 방지할 수 있다\n<ul>\n<li><code>fun greet(): String = \"hello\"</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"함수는-표현식으로\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%EB%8A%94-%ED%91%9C%ED%98%84%EC%8B%9D%EC%9C%BC%EB%A1%9C\" aria-label=\"함수는 표현식으로 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수는 표현식으로</h2>\n<ul>\n<li>\n<p>모든 함수가 표현식으로 취급되어 변수에 할당하거나 이후 프로세스에서 사용할 수 있다</p>\n</li>\n<li>\n<p>함수의 리턴 내용이 없는 경우(void) <code>Unit</code> 이라는 특별한 타입으로 반환된다</p>\n<pre><code class=\"language-kotlin\">fun sayHello() = println(\"hello\")\nval message: String = sayHello()\n>>> hello\n>>> error: type mismatch: inferred type is Unit but String was expected\n\nfun sayHello() = println(\"hello\")\nval message: Unit = sayHello()\nprintln(message)\n>>> hello\n>>> kotlin.Unit\n</code></pre>\n<ol>\n<li>리턴하는게 없는 함수를 String 타입의 변수에 할당하려고 하면 오류가 발생한다</li>\n<li><code>Unit</code> 타입을 리턴하도록 표현식으로 작성되어 있으며 Unit 또한 <code>기본 메소드</code>를 가지고 있다\n<ul>\n<li><code>Unit의 toString()</code> 메소드가 호출되었고 해당 파일을 클래스로 래핑한 이름인 kotlin.Unit이 출력되었다</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"파라미터\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0\" aria-label=\"파라미터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파라미터</h2>\n<ul>\n<li>타입 추론이 가능한 함수의 리턴 타입과는 다르게 파라미터의 타입은 명시하여야 한다</li>\n<li>파라미터에는 var, val를 사용해 변수를 정의하지 않는다\n<ul>\n<li>파라미터 값을 변경하려하면 컴파일 오류가 발생한다</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"블록으로-정의된-함수\" style=\"position:relative;\"><a href=\"#%EB%B8%94%EB%A1%9D%EC%9C%BC%EB%A1%9C-%EC%A0%95%EC%9D%98%EB%90%9C-%ED%95%A8%EC%88%98\" aria-label=\"블록으로 정의된 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>블록으로 정의된 함수</h2>\n<ul>\n<li>\n<p><code>블록으로 정의된 함수</code>는 리턴 타입을 항상 정의해줘야한다</p>\n<ul>\n<li><strong><code>return 키워드도 꼭 필요하다!!!</code></strong></li>\n</ul>\n</li>\n<li>\n<p>단일표현식 대신 블록 바디를 사용한 경우</p>\n<ul>\n<li>\n<p><code>fun notReally() = {2}</code></p>\n</li>\n<li>\n<p>코틀린은 코드 블록 안으로 들어가서 타입 추론을 하지 않는다</p>\n</li>\n<li>\n<p><code>람다 표현식</code>이나 <code>익명함수</code>로 취급한다</p>\n<pre><code class=\"language-kotlin\">fun f1() = 2\nfun f2() = { 2 }\nfun f3(factor: Int) = { n: Int -> n * factor }\nprintln(f1()) >>> 2\nprintln(f2()) >>> kotlin.Int // 람다표현식\nprintln(f2()()) >>> 2\nprintln(f3(2)) >>> (kotlin.Int) -> kotlin.Int // 파라미터를 가지는 람다표현식\nprintln(f3(2)(3)) >>> 6\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"기본-인자와-명시적-인자\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8-%EC%9D%B8%EC%9E%90%EC%99%80-%EB%AA%85%EC%8B%9C%EC%A0%81-%EC%9D%B8%EC%9E%90\" aria-label=\"기본 인자와 명시적 인자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 인자와 명시적 인자</h1>\n<h2 id=\"오버로딩\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%B2%84%EB%A1%9C%EB%94%A9\" aria-label=\"오버로딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오버로딩</h2>\n<ul>\n<li>기존 함수와는 다른 수의 인자나 타입을 받을 수 있도록하고자 같은 이름의 함수를 작성 + 작성 + 작성\n<ul>\n<li><code>코틀린에서는 같은 이름으로 함수를 중복 생성할 수 없다</code></li>\n</ul>\n</li>\n<li>코틀린에서도 오버로딩은 가능하지만 기존 함수에 <code>기본 인자</code>나 <code>명시적 인자</code> 를 사용해 함수를 변경하는 것이 더 단순한 방법이다\n<ul>\n<li>그러나 바이너리가 변경되면 컴파일을 다시 해야한다는 단점이 있는데 하면 되지...</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"기본인자로-함수-변경하기\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8%EC%9D%B8%EC%9E%90%EB%A1%9C-%ED%95%A8%EC%88%98-%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0\" aria-label=\"기본인자로 함수 변경하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본인자로 함수 변경하기</h2>\n<ul>\n<li>\n<p>기존 함수에 인자를 추가하는 경우</p>\n<ul>\n<li>기존 함수를 사용하던 곳에서 인자가 누락되어 오류 발생</li>\n<li>자바에서는 이를 오버로딩을 통해 해결하였으나 코드량이 방대해지는 단점이 존재</li>\n<li>코틀린에서는 기본인자를 활용해 기존에 사용하던 함수에서도 오류 없이 실행되도록함</li>\n</ul>\n<pre><code class=\"language-kotlin\">fun greet(name: String): String = \"Hello $name\"\nprintln(greet(\"이름\")) >>> Hello 이름\n\n// 기존 함수에 일반 인자를 추가하는 경우\nfun greet(name: String, age: Int): String = \"Hello $name $age\"\nprintln(greet(\"이름\")) // 기존 함수를 사용하던 곳에서 인자가 누락되어 오류 발생\n\n// 기본 인자 형태로 인자를 추가하는 경우\nfun greet(name: String, age: Int = 10): String = \"Hello $name $age\"\nprintln(greet(\"이름\")) >>> Hello 이름 10\nprintln(greet(\"이름\", 20)) >>> Hello 이름 20\n</code></pre>\n<ul>\n<li>\n<p>기본인자를 사용하게 되면 해당 파라미터를 전달하지 않은 경우에는 기본인자 값이 사용된다</p>\n</li>\n<li>\n<p>만약 기본인자가 일반인자보다 앞에 위치하게 된다면 항상 일반인자까지 전달하기 위해 모든 인자를 넣어줘야한다</p>\n<ul>\n<li>이는 기본인자를 사용하는 장점을 잃어버리는 것</li>\n<li>기본인자를 효과적으로 사용하기 위해 마지막 인자로 사용하는 것이 좋다</li>\n</ul>\n<pre><code class=\"language-kotlin\">fun greet(name: String = \"이름\", age: Int): String = \"Hello $name $age\"\nprintln(greet(\"이름\", 10)) >>> Hello 이름 10\nprintln(greet(\"이름\", 20)) >>> Hello 이름 20\n// 기본인자가 있음에도 뒤에 일반인자까지 순서대로 전달되어야 하기에 모든 인자를 전달해줘야한다\n</code></pre>\n</li>\n<li>\n<p>기본인자에 문자열 템플릿 형태로도 지정할 수 있다</p>\n<ul>\n<li>하지만 아직 초기화되지 않은 인자를 참조한 표현식을 기본인자 값으로 사용하는 경우 컴파일 오류가 발생한다</li>\n</ul>\n<pre><code class=\"language-kotlin\">fun greet(name: String, length: String = \"${name.length}\"): String = \"Hello $name $length\"\nprintln(greet(\"이름\")) >>> Hello 이름 2\n\nfun greet(length: String = \"${name.length}\", name: String): String = \"Hello $name $length\"\nprintln(greet(7, \"이름\")) // 컴파일 오류\n// 기본인자를 생성할 때 템플릿에서 아직 초기화되지 않은 name을 사용해서 오류가 발생한다\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"명시적-인자로-가독성-향상하기\" style=\"position:relative;\"><a href=\"#%EB%AA%85%EC%8B%9C%EC%A0%81-%EC%9D%B8%EC%9E%90%EB%A1%9C-%EA%B0%80%EB%8F%85%EC%84%B1-%ED%96%A5%EC%83%81%ED%95%98%EA%B8%B0\" aria-label=\"명시적 인자로 가독성 향상하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>명시적 인자로 가독성 향상하기</h2>\n<ul>\n<li>\n<p>함수의 인자가 어떤 값인지 명확하게 전달하여 가독성을 향상시키기 위해 명시적 인자를 사용한다</p>\n<ul>\n<li>명시적 인자를 사용하면 파라미터의 순서를 바꿔서 사용할 수 있다</li>\n</ul>\n<pre><code class=\"language-kotlin\">fun greet(name: String, city: String, age: Int = 10, value: Int = 20) ...\nprintln(greet(\"이것은\", \"무엇일까\")) // 각각의 파라미터가 어떤 값인지 알 수 없다\n\n// 명시적 인자를 사용해 가독성 + 선택적 인자 전달\nprintln(greet(name = \"이것은\", city = \"무엇일까\", age = 20))\nprintln(greet(city = \"무엇일까\", age = 20, name = \"이것은\", value = 3))\nprintln(greet(city = \"무엇일까\", name = \"이것은\"))\n</code></pre>\n</li>\n</ul>\n<h1 id=\"다중-인자와-스프레드\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EC%A4%91-%EC%9D%B8%EC%9E%90%EC%99%80-%EC%8A%A4%ED%94%84%EB%A0%88%EB%93%9C\" aria-label=\"다중 인자와 스프레드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다중 인자와 스프레드</h1>\n<h2 id=\"다중인자\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EC%A4%91%EC%9D%B8%EC%9E%90\" aria-label=\"다중인자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다중인자</h2>\n<ul>\n<li>\n<p>다중인자 <code>vararg</code> 는 함수가 여러 개의 인자를 받을 때 타입 안정성을 제공해주는 기능</p>\n<ul>\n<li><code>vararg</code> 키워드로 선언한 타입의 형태로 인자를 여러개 받는다</li>\n</ul>\n<pre><code class=\"language-kotlin\">// 배열을 인자로 받는 함수\nfun max(numbers: IntArray): Int {\n\t...\n}\nprintln(max([1, 3, 5])) // 파라미터를 배열로 전달해야한다\n\n// 다중인자 vararg을 사용한 함수\nfun max(vararg numbers: Int): Int { // Int 인자를 배열형태로 받는다\n\t...\n}\nprintln(max(1, 3, 5)) // 여러개의 파라미터를 받는다\n</code></pre>\n</li>\n<li>\n<p>다중인자도 기본인자와 동일하게 인자가 위치하는 순서는 상관없지만 <code>어디까지가 해당 인자의 범위라고 볼 것인지</code> 를 파악하는 것이 결국 명시적 인자를 사용해야만 하므로 다중인자나 기본인자의 장점을 효과적으로 사용하기 위해 뒤쪽에 위치하는 것을 권한다</p>\n</li>\n</ul>\n<h2 id=\"스프레드-연산자\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A0%88%EB%93%9C-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"스프레드 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스프레드 연산자</h2>\n<ul>\n<li>\n<p>이미 배열로 존재하는 값들을 <code>vararg</code> 의 인자로 다시 풀어서 전달해야 하는 경우에 사용한다</p>\n<pre><code class=\"language-kotlin\">// vararg 형태로 Int 인자를 받는 함수\nfun max(vararg numbers: Int): Int {\n\t...\n}\n\nval values = intArrayOf(1, 2, 3)\nprintln(max(values)) // type mismatch: inferred type is IntArray but Int was expected\n</code></pre>\n<ol>\n<li>Int형 인자를 여러개 받는 함수에 IntArray 파라미터를 넘기면서 타입 에러가 발생하였다</li>\n<li><code>println(max(values[0], values[1], values[2]))</code> 형태로 파라미터를 풀어서 전달하는 방법이 있으나 너무 코드가 지저분해진다 (코틀린의 목적은 단순하고 간결함인데!)</li>\n<li><code>println(max(*values))</code> 스프레드 연산자 <code>*</code> 를 이용해 배열을 다중인자로 전달하였다</li>\n</ol>\n</li>\n<li>\n<p>배열은 스프레드 연산자가 가능한데 리스트는 불가능하다...</p>\n<ul>\n<li><code>max(*listOf(1, 2, 3).toIntArray())</code> 이처럼 리스트를 배열로 한번 변환 후 스프레드 할 수 있다</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"구조분해\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EC%A1%B0%EB%B6%84%ED%95%B4\" aria-label=\"구조분해 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구조분해</h1>\n<ul>\n<li>\n<p>구조화 ↔ 구조분해</p>\n<ul>\n<li>구조화: 다른 변수의 값으로 객체를 만드는 것</li>\n<li>구조분해: 객체에서 값을 추출해 변수에 넣는 것</li>\n<li>javascript의 구조분해와 유사하지만 속성의 이름이 아닌 <code>속성의 위치</code>를 기반으로 한다</li>\n</ul>\n<pre><code class=\"language-kotlin\">// 일반적인 방법\nfun getFullName = Triple(\"첫번째\", \"두번째\", \"세번째\")\nval result = getFullName()\nval first = result.first // 각각 속성값들을 할당해줘야한다\nval second = result.second\nval third = result.third\n\n// 구조분해\nval (first, second, third) = getFullName() // Triple의 속성값들을 순서대로 할당한다\nval (_, _, third) = getFullName() // 필요하지 않은 속성값은 _로 스킵한다\nval (_, second) = getFullName() // 필요하지 않은 속성값은 _로 스킵한다\n</code></pre>\n</li>\n</ul>\n<h1 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h1>\n<ul>\n<li>코틀린에서는 <code>top-level functions</code> 최상위 함수를 개발자가 만들 수 있다\n<ul>\n<li>객체로만 이뤄질 필요가 없고 함수로만 작성이 가능하다</li>\n<li>상황에 따라 함수형, 객체지향, 절차적 구현을 가능하게 한다</li>\n</ul>\n</li>\n<li>파라미터는 항상 타입을 명시해주어야 한다</li>\n<li>블록으로 작성된 함수는 리턴타입이 필수로 명시되어야한다\n<ul>\n<li>등호로 작성된 단일표현식 함수는 리턴타입을 추론 가능하여 생략해도 된다</li>\n</ul>\n</li>\n<li>기본인자 기능을 활용하면 기존의 작성된 함수의 확장을 쉽게 할 수 있다</li>\n<li>명시적 인자를 사용해 코드의 가독성을 향상시킨다</li>\n<li><code>vararg와 *</code> 를 이용해 다중인자를 전달하면서도 타입의 안정성을 유지시켜준다</li>\n</ul>\n<h1 id=\"\" style=\"position:relative;\"><a href=\"#\" aria-label=\" permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🚨?!?!?</h1>\n<ul>\n<li>\n<p>Nothing</p>\n<ul>\n<li>\n<p>Unit을 리턴값이 없다는 void를 대체하는 타입으로 사용하였는데 Nothing이라는 타입을 알게 되었다</p>\n</li>\n<li>\n<p>Unit과 비슷하지만 또 다르고 void와 Unit이 완전 같지 않음을 깨닫고 🙈</p>\n</li>\n<li>\n<p>Unit을 로그 찍어보면 <code>클래스.Unit</code> 으로 나오는 부분에서 추측할 수 있듯 Unit 자체가 class이다</p>\n</li>\n<li>\n<p>그렇다면 Unit을 진정한 void라고 볼 수 있을까?</p>\n<ul>\n<li>void는 리턴 값이 없다는 것을 의미하는 타입이지만 Unit은 그 자체로 class를 의미하므로 진정한 void는 아닌 것 같다</li>\n<li>그래서 Nothing이 나타난다</li>\n<li>리턴은 하지만 값이 없다는 의미의 Unit</li>\n<li>리턴이라는 것조차 하지 않는다는 Nothing</li>\n</ul>\n<pre><code class=\"language-kotlin\">fun returnVoid() {  // Unit으로 추론된다\n    println(\"무언가 리턴은 하지만 리턴하는 값이 없다\")\n    return\n}\nfun returnUnit(): Unit {\n    println(\"Unit을 리턴 타입으로 명시하면 return 키워드를 쓰지 않아도 리턴되는 값이 없는 형태로 인식된다\")\n}\n\nfun nothing(): Nothing = throw Error(\"리턴하지 않고 에러를 던졌다\")\nfun throwErrNothing(): Nothing {\n    // 블록 함수는 리턴이 필수인데 에러를 던졌으니깐 리턴이 없어도 이게 끝!\n    throw Error(\"리턴 타입을 Nothing 이라고 명시하였다\")\n}\nfun throwErr() {\n    throw Error(\"리턴 타입이 Unit으로 추론되고 있다\")\n}\n</code></pre>\n</li>\n<li>\n<p>모든 타입을 뜻하는 Any > Unit > Nothing</p>\n<ul>\n<li>리턴 타입을 명시하지 않은 throw를 던졌더니 Unit으로 추론되고 있다</li>\n<li>Nothing은 모든 타입 클래스가 갖고 있는 하위 타입으로 보여진다</li>\n</ul>\n</li>\n<li>\n<p><code>리턴이라는 행위의 유무</code>가 두 타입의 가장 큰 차이점!!!</p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"-더-알아보기\" style=\"position:relative;\"><a href=\"#-%EB%8D%94-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0\" aria-label=\" 더 알아보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🙈 더 알아보기</h1>\n<ul>\n<li>\n<p>오버로딩 vs 오버라이드</p>\n<ul>\n<li>\n<p>오버로딩</p>\n<ul>\n<li>\n<p>같은 메서드 이름으로 파라미터만 다르게 하여 확장</p>\n</li>\n<li>\n<p>비슷한 코드를 중복 작성하게 됨</p>\n<pre><code class=\"language-kotlin\">함수1(param1) {}\n함수1(param1, param2) {}\n함수1(param1, param2, param3) {}\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>오버라이드</p>\n<ul>\n<li>\n<p>상속 받아온 메서드를 재정의</p>\n<pre><code class=\"language-kotlin\">클래스 extends 부모 {\n\t부모함수() {\n\t\t// 재정의\n\t}\n}\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"slug":"/blog/kotlin-study-ch3","date":"2021년 4월 8일","title":"코틀린은 함수도 간결하게 표현하고자 한다","subtitle":"Chapter 03 함수를 사용하자","tags":["코틀린","스터디","kotlin"]}}},"pageContext":{"id":"24e7539c-e339-5e29-9661-ec82b098c338","frontmatter__slug":"/blog/kotlin-study-ch3","__params":{"frontmatter__slug":"blog"}}},"staticQueryHashes":["3000541721","3293771174"],"slicesMap":{}}