{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/blog/kotlin-study-ch5/","result":{"data":{"markdownRemark":{"html":"<pre><code class=\"language-markdown\">[참고 도서]\n- 다재다능 코틀린 프로그래밍\n</code></pre>\n<h1 id=\"콜렉션-특징\" style=\"position:relative;\"><a href=\"#%EC%BD%9C%EB%A0%89%EC%85%98-%ED%8A%B9%EC%A7%95\" aria-label=\"콜렉션 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>콜렉션 특징</h1>\n<ul>\n<li>자바 List, Set, Map을 코틀린에서도 사용한다\n<ul>\n<li>코틀린에서는 자바의 뮤터블 콜렉션 인터페이스를 이뷰터블 읽기 전용, 뮤터블 읽기/쓰기 인터페이스으로 나뉜다</li>\n</ul>\n</li>\n<li>JDK 제공 함수 이외의 코틀린 콜렉션에 메소드가 추가되었다\n<ul>\n<li><code>kotlin.collections</code> 패키지에 자바 콜렉션에 유용하게 사용할 수 있는 함수가 추가되었다</li>\n</ul>\n</li>\n<li>콜렉션의 요소들을 반복문으로 사용할 때 자바보다 더 유연하고 직관적으로 사용할 수 있다\n<ul>\n<li>Pair - 값이 두 개인 튜플</li>\n<li>Triple - 값이 세 개인 튜플</li>\n<li>Array - 객체나 프리미티브 타입으로 순번이 있고 크기가 고정된 콜렉션</li>\n<li>List - 객체들이 정렬된 콜렉션</li>\n<li>Set - 객체들이 정렬되지 않은 콜렉션</li>\n<li>Map - 키와 값</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"코틀린-콜렉션에-추가된-메소드\" style=\"position:relative;\"><a href=\"#%EC%BD%94%ED%8B%80%EB%A6%B0-%EC%BD%9C%EB%A0%89%EC%85%98%EC%97%90-%EC%B6%94%EA%B0%80%EB%90%9C-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\"코틀린 콜렉션에 추가된 메소드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코틀린 콜렉션에 추가된 메소드</h2>\n<pre><code class=\"language-kotlin\">var list = listOf(1, 2, 3)\nprint(list.javaClass) // class java.util.Arrays$ArrayList\nfor ((index, value) in list.withIndex()) { print(\"index: $index, value: $value\") } // 012\n\n// withIndex\npublic fun &#x3C;T> Iterable&#x3C;T>.withIndex(): Iterable&#x3C;IndexedValue&#x3C;T>> {\n    return IndexingIterable { iterator() }\n}\n</code></pre>\n<ol>\n<li>listOf()로 <code>JDK의 ArrayList</code> 객체를 가져온다</li>\n<li><code>withIndex()</code> 로 리스트의 인덱스와 값을 가져온다\n<ul>\n<li><code>IndexedValue</code> 라는 특별한 interator를 반환한다</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>코틀린 컬렉션의 편의를 위해 JDK 클래스에 추가해둔 메소드를 사용한다</li>\n</ul>\n<h2 id=\"뷰\" style=\"position:relative;\"><a href=\"#%EB%B7%B0\" aria-label=\"뷰 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>뷰</h2>\n<ul>\n<li>이뮤터블 콜렉션은 동시성을 사용하는 함수형 프로그래밍이나 비동기 처리에 안정적이다</li>\n<li>대부분 자바의 콜렉션은 대부분 뮤터블이였으며 최근에 이뮤터블 콜렉션이 추가되었다\n<ul>\n<li>그러나 이뮤터블, 뮤터블 버전이 <code>모두 같은 인터페이스를 구현하고 있기에 문제가 발생한다</code></li>\n<li>이뮤터블 콜렉션을 변경하려는 경우 <code>런타임</code> 에 <code>UnsupportedOperationException</code> 이 발생한다</li>\n</ul>\n</li>\n<li>코틀린은 이뮤터블 콜렉션을 변경하려는 것처럼 <code>연산이 불가능한 것을 런타임이 되기 전에 알려주고자</code> <code>뷰</code> 가 존재한다</li>\n<li>List, Set, Map 각각 뷰를 두 가지씩 갖고 있다\n<ul>\n<li>읽기 전용 뷰인 이뮤터블 뷰\n<ul>\n<li>쓰기를 시도하면 컴파일 단계에서 실패한다</li>\n</ul>\n</li>\n<li>읽기쓰기 뷰인 뮤터블 뷰</li>\n<li>이뮤터블, 뮤터블 뷰 모두 자바 기본 콜렉션에 매핑되지만 뷰를 사용하여 <code>런타임 오버헤드가 없고 컴파일 시간이나 실행 시간에 변환이 발생하지 않는다</code></li>\n<li>읽기전용의 참조도 뮤터블 콜렉션이다\n<ul>\n<li>콜렉션 자체는 변경할 수는 없지만 다른 스레드에서 참조하고 있는 콜렉션을 변경 시도할 수 있다</li>\n<li>여러 개의 뷰에서 같은 인스턴스를 참조하고 있고 어떤 스레드에서는 해당 인스턴스를 읽기쓰기용으로 사용하고 다른 스레드는 읽기전용으로만 사용하고 있다면 동일한 콜렉션을 변경하지 않도록 해야한다</li>\n<li>따라서 스레드 안정성을 제공해주지 않는다</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"pair와-triple\" style=\"position:relative;\"><a href=\"#pair%EC%99%80-triple\" aria-label=\"pair와 triple permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pair와 Triple</h1>\n<h2 id=\"튜플\" style=\"position:relative;\"><a href=\"#%ED%8A%9C%ED%94%8C\" aria-label=\"튜플 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>튜플</h2>\n<ul>\n<li>작고 셀 수 있는 크기의 객체의 배열</li>\n<li>코틀린에서는 2, 3개 사이즈의 튜플만을 허용한다</li>\n<li>Pair - 2개 사이즈의 튜플</li>\n<li>Triple - 3개 사이즈의 튜플</li>\n</ul>\n<h2 id=\"pair\" style=\"position:relative;\"><a href=\"#pair\" aria-label=\"pair permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pair</h2>\n<ul>\n<li>Pair에 담긴 값은 pair.first, pair.second로 가져올 수 있다</li>\n</ul>\n<pre><code class=\"language-kotlin\">val pair = Pair&#x3C;Int, String>(1, \"튜플\") // 각각의 타입을 다르게 넣을수도 있다\n>>> (1, 튜플)\n// pair.first == 1\n// pair.second == 튜플\n\nval mapPair = mapOf(\"Tom\" to \"Cat\", \"Jerry\" to \"Mouse\")\n>>> {Tom=Cat, Jerry=Mouse}\n\npublic fun &#x3C;K, V> mapOf(vararg pairs: Pair&#x3C;K, V>): Map&#x3C;K, V> =\n    if (pairs.size > 0) pairs.toMap(LinkedHashMap(mapCapacity(pairs.size))) else emptyMap()\n</code></pre>\n<ul>\n<li><code>mapOf</code> 는 키-값 형태를 반환하는데 인자로 <code>to()</code> 메소드로 만든 <code>Pair 인스턴스</code>를 받는다\n<ul>\n<li><strong><code>to() 메소드는 Pair의 인스턴스를 만든다</code></strong>\n<ul>\n<li>코틀린의 모든 객체에서 사용할 수 있는 확장함수</li>\n</ul>\n</li>\n<li>mapOf는 Pair를 인자로 받는다</li>\n<li><code>\"Tom\" to \"Cat\"</code> , <code>\"Jerry\" to \"Mouse\"</code> 가 각각  2개 사이즈 튜플인 Pair이다\n<ul>\n<li>Tom과 Cat으로 구성된 Pair + Jerry와 Mouse로 구성된 Pair</li>\n<li>키는 Tom, Jerry이고 값은 Cat, Mouse</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"triple\" style=\"position:relative;\"><a href=\"#triple\" aria-label=\"triple permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Triple</h2>\n<ul>\n<li>\n<p>3개 사이즈를 갖는 튜플로 first, second, third로 각각 값을 가져온다</p>\n<pre><code class=\"language-kotlin\">var triple = Triple&#x3C;String, Int, Boolean>(\"트리플\", 1, true)\nprintln(triple)\nprintln(\"${triple.first}, ${triple.second}, ${triple.third}\")\n\n>>> (트리플, 1, true)\n>>> 트리플, 1, true\n</code></pre>\n</li>\n<li>\n<p>Object 형태의 각각 클래스를 만들어주는 작업이 필요하지 않고 간결하게 타입 안정성까지 제공하는Pair로 코드를 작성할 수 있다</p>\n<pre><code class=\"language-kotlin\">val airportCodes = listOf(\"A\", \"B\", \"C\")\nvar temperatures = airportCodes.map { code -> code to 1 }\nfor (temp in temperatures) {\n  println(\"temp: $temp\")\n  println(\"Airport: ${temp.first}, Temperature: ${temp.second}\")\n}\n\n>>>\ntemp: (A, 1)\nAirport: A, Temperature: 1\ntemp: (B, 1)\nAirport: B, Temperature: 1\ntemp: (C, 1)\nAirport: C, Temperature: 1\n</code></pre>\n<ol>\n<li>listOf로 만든 리스트를</li>\n<li>map으로 돌면서</li>\n<li>to를 이용해 Pair로 만들었다</li>\n</ol>\n<p>⇒ map으로 기존 airportCodes로 temperatures 생성하였고 List&#x3C;Pair&#x3C;String, Int>> 형태가 되었다</p>\n</li>\n<li>\n<p>객체 쌍이 필요하거나 튜플이 필요한 곳에 Pair, Triple이 유용하다</p>\n<ul>\n<li>간결하고 컴파일 시간에 타입 안정성을 제공한다</li>\n</ul>\n</li>\n<li>\n<p>Pair, Triple 모두 <code>immutable</code> 이다</p>\n</li>\n</ul>\n<h1 id=\"객체-배열과-프리미티브-배열\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EB%B0%B0%EC%97%B4%EA%B3%BC-%ED%94%84%EB%A6%AC%EB%AF%B8%ED%8B%B0%EB%B8%8C-%EB%B0%B0%EC%97%B4\" aria-label=\"객체 배열과 프리미티브 배열 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 배열과 프리미티브 배열</h1>\n<ul>\n<li>\n<p>Array<T> 클래스로 낮은 수준의 최적화에서만 사용</p>\n<ul>\n<li>뮤터블</li>\n<li>[]의 인덱스 연산자 접근</li>\n<li>그 외에는 List 사용</li>\n</ul>\n</li>\n<li>\n<p><code>arrayOf</code> 라는 최상위 함수를 사용해 배열을 만든다</p>\n<pre><code class=\"language-kotlin\">val array = arrayOf(1, 2, 3)\nprintln(array::class) // class kotlin.Array\nprintln(array.javaClass) // class [Ljava.lang.Integer;\nprintln(array[0]) // 1\n</code></pre>\n<ul>\n<li>arrayOf로 생성한 배열은 코틀린에서는 Array<T>를 갖지만 JVM에서 보면 Integer 배열이다\n<ul>\n<li>Integer 클래스로 생성되었고 <strong><code>프리미티브 타입인 int를 사용한 경우보다 오버헤드가 크게 걸린다</code></strong></li>\n<li>따라서 <code>intArrayOf(1, 2, 3)</code> 처럼 사용하여 <code>kotlin.Array</code> 대신에  <code>kotlin.IntArray</code> 타입 특화 배열 클래스를 사용할 수 있도록 한다</li>\n<li><code>kotlin.Array</code> 내장된 메소드들(size, sum, average...)을 사용해 배열 데이터 계산을 할 수 있다</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"list\" style=\"position:relative;\"><a href=\"#list\" aria-label=\"list permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>List</h1>\n<ul>\n<li>뮤터블, 이뮤터블을 선택하여 사용한다\n<ul>\n<li>정렬 + 길이 가변</li>\n<li>[]의 인덱스 연산자로 접근하거나 get() 메소드를 사용한다\n<ul>\n<li>인덱스 연산자는 내부적으로 get() 메소드를 사용한다</li>\n<li>결국 노이즈를 줄이기 위해서 인덱스 연산자를 사용하기를 권장한다</li>\n</ul>\n</li>\n<li>listOf() - 이뮤터블 리스트\n<ul>\n<li>kotlin.collections.List<T></li>\n</ul>\n</li>\n<li>mutableListOf() - 뮤터블 리스트</li>\n</ul>\n</li>\n<li><code>B.contains(A)</code> 나 <code>A in B</code> 로 A라는 값이 리스트 B에 존재하는지 확인한다\n<ul>\n<li><code>in</code>을 사용하는게 더 표현력이 높고 직관적이다...</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"listof\" style=\"position:relative;\"><a href=\"#listof\" aria-label=\"listof permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>listOf</h2>\n<ul>\n<li>\n<p>리턴하는 참조를 변경할 수 없다</p>\n<ul>\n<li>읽기 전용 참조를 리턴한다</li>\n</ul>\n<pre><code class=\"language-kotlin\">val fruits = listOf(\"사과\")\nfruits.add(\"배\") // Kotlin: Unresolved reference: add\n</code></pre>\n</li>\n<li>\n<p>List<T>는 자바의 Arrays.asList()로 만든 JDK 객체의 뷰로 동작한다</p>\n<ul>\n<li>해당 인터페이스에는 mutation 권한을 가진 메소드가 없기 때문에 <code>add()</code> 메소드가 컴파일 단계에서 실패한다</li>\n<li>이런 뷰를 이용해 코틀린의 코드를 안전하게 만들고 실행 시간에 오버헤드나 변경이 없게 만든다</li>\n<li>그러나 <code>+, -</code> 연산자로 리스트를 변경할 수 있다.................</li>\n</ul>\n<pre><code class=\"language-kotlin\">val fruits = listOf(\"사과\")\nval fruits2 = fruits + \"배\"\nval fruits3 = fruits2 - \"배\"\nprintln(fruits) // [사과]\nprintln(fruits2) // [사과, 배]\nprintln(fruits3) // [사과]\nprintln(fruits::class) // class java.util.ArrayList\nprintln(fruits.javaClass) // class java.util.ArrayList\n</code></pre>\n<ul>\n<li><code>+, -</code> 연산자로 변경하는 경우 기존 리스트를 복사해서 새로운 리스트를 반환하기에 기존의 리스트는 유지된다</li>\n<li><code>class java.util.Arrays$ArrayList</code> 가 나온다고 하는데 나는 이게 아닌데...?</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"mutablelistof\" style=\"position:relative;\"><a href=\"#mutablelistof\" aria-label=\"mutablelistof permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>mutableListOf</h2>\n<ul>\n<li>\n<p>MutableList<T></p>\n</li>\n<li>\n<p>List<T>에서 사용하던 것과 동일하게 사용 가능하다</p>\n<pre><code class=\"language-kotlin\">val fruits = mutableListOf(\"사과\")\nfruits.add(\"배\")\nprintln(fruits) // [사과, 배]\nprintln(fruits::class) // class java.util.ArrayList\nprintln(fruits.javaClass) // class java.util.ArrayList\n</code></pre>\n<ul>\n<li>읽기 쓰기 모두 가능한 인터페이스이지만 listOf()로 이뮤터블한 리스트를 사용하는 것이 좋다</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"set\" style=\"position:relative;\"><a href=\"#set\" aria-label=\"set permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Set</h1>\n<ul>\n<li>Set<T></li>\n<li>정렬되지 않은 요소의 모음\n<ul>\n<li>\n<p>List<T>처럼 immutable, mutable 둘 다 존재하며 메소드들을 지원한다</p>\n</li>\n<li>\n<p>setOf(), mutableSetOf(), hashSetOf(), linkedSetOf(), sortedSetOf()</p>\n</li>\n<li>\n<p>중복 요소를 허용하지 않는다</p>\n<pre><code class=\"language-kotlin\">val fruits = setOf(\"사과\", \"배\", \"배\")\nprintln(fruits) // [사과, 배]\nprintln(fruits::class) // class java.util.LinkedHashSet\nprintln(fruits.javaClass) // class java.util.LinkedHashSet\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"map\" style=\"position:relative;\"><a href=\"#map\" aria-label=\"map permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Map</h1>\n<ul>\n<li>\n<p>Map&#x3C;K, V></p>\n</li>\n<li>\n<p>키-값 Pair를 보관하는 콜렉션</p>\n<ul>\n<li>immutable, mutable 모두 존재한다</li>\n<li>mapOf(), mutableMapOf(), hashMapOf(), linkedMapOf(), sortedMapOf()</li>\n</ul>\n<pre><code class=\"language-kotlin\">val sites = mapOf(\"key\" to \"value\", \"키\" to \"값\")\nprintln(sites) // {key=value, 키=값}\nprintln(sites::class) // class java.util.LinkedHashMap\nprintln(sites.javaClass) // class java.util.LinkedHashMap\n</code></pre>\n<ul>\n<li>\n<p><code>to()</code> 확장함수를 이용해 키-값 Pair를 만든다</p>\n</li>\n<li>\n<p>메소드를 이용해 키 또는 값이 존재하는지 확인할 수 있다</p>\n<ul>\n<li><code>sites.containsKey(\"키\")</code></li>\n<li><code>sites.containsValue(\"값\")</code></li>\n<li><code>sites.contains(\"키\")</code></li>\n<li><code>\"키\" in sites</code></li>\n</ul>\n</li>\n<li>\n<p><code>get()</code> 메소드나 [] 인덱스 연산자로 해당 키에 대한 값을 가져온다</p>\n<pre><code class=\"language-kotlin\">  val value: String? = sites.get(\"키가없다\") >>> null\n  val value: String? = sites[\"키가없다\"] >>> null\n  val value: String = sites.getOrDefault(\"키가없다\", \"기본값 반환\") >>> 기본값 반환\n</code></pre>\n<ul>\n<li>만약 해당 키에 대한 값이 없다면 오류가 발생한다\n<ul>\n<li>nullable 타입 사용하거나 디폴트 값을 반환하는 메서드를 사용</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>mapOf()</code> 은 읽기 전용 참조로 변경이 불가능 하지만 <code>+, -</code> 연산자로 새로운 맵을 만들 수 있다</p>\n<ul>\n<li><code>val sites2 = sites + (\"새로운키\" to \"값\")</code></li>\n</ul>\n</li>\n<li>\n<p><code>key, value</code> 속성값으로 맵의 키, 값을 가져온다</p>\n<pre><code class=\"language-kotlin\">for (site in sites) {\n\tprintln(\"${site.key} -> ${site.value}\")\n}\n\n// 구조분해\nfor ((key, value) in sites) {\n\tprintln(\"${site.key} -> ${site.value}\")\n}\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h1>\n<ul>\n<li>코틀린에서는 자바 콜렉션 확장과 읽기전용 뷰를 통해 컴파일 시간동안 안정성을 높인다\n<ul>\n<li>함수형, 동시성, 비동기 코드를 작성 시 읽기전용 뷰를 사용해야한다</li>\n</ul>\n</li>\n<li>Pair와 Triple로 크기가 작은 콜렉션을 만든다</li>\n<li>크기가 크고 고정된 콜렉션은 Array 클래스를 사용하며 크기가 변경되는 경우에는 List나 Set을 사용한다</li>\n<li>콜렉션을 사용할때 해당 콜렉션이 mutable인지 immutable인지 선택해서 생성한다\n<ul>\n<li>읽기전용 뷰, 읽기쓰기 뷰 차이</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"\" style=\"position:relative;\"><a href=\"#\" aria-label=\" permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🚨?!?!?</h1>\n<ul>\n<li><strong>런타임/실행 시간</strong>\n<ul>\n<li>내용 중 두 단어가 혼용되어있는데 같은 것이 아닌건가...</li>\n<li>단어를 통일하는게 좋겠다</li>\n</ul>\n</li>\n<li><strong>get() 보다 [] 인덱스 연산자</strong>\n<ul>\n<li>인덱스 연산자 내부적으로 get()을 사용하는데 바로 사용하는 것보다 인덱스로 접근하는게 왜 더 안정적인 것일까?</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"-더-알아보기\" style=\"position:relative;\"><a href=\"#-%EB%8D%94-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0\" aria-label=\" 더 알아보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🙈 더 알아보기</h1>\n<ul>\n<li>mutable vs immutable\n<ul>\n<li>뮤터블 콜렉션 인터페이스 - 간단한 싱글 스레드\n<ul>\n<li>mutableListOf, mutableSetOf...</li>\n</ul>\n</li>\n<li>이뮤터블 콜렉션 인터페이스 - 함수형 비동기\n<ul>\n<li>listOf, setOf...</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>최상위 함수\n<ul>\n<li>클래스나 다른 함수 안에 있는 것이 아닌 가장 바깥에 존재하는 함수\n<ul>\n<li>static</li>\n</ul>\n</li>\n<li>같은 Package라면 import하지 않아도 바로 접근이 가능\n<ul>\n<li>다른 Package라면 <code>import package</code> 필요</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>코드 노이즈</li>\n</ul>","frontmatter":{"slug":"/blog/kotlin-study-ch5","date":"2021년 4월 13일","title":"코틀린의 immutable, mutable한 콜렉션"}}},"pageContext":{"id":"92bd12fd-6bff-5950-bbd7-2c876c1875d9","frontmatter__slug":"/blog/kotlin-study-ch5","__params":{"frontmatter__slug":"blog"}}},"staticQueryHashes":["3000541721","3293771174"]}