{
    "componentChunkName": "component---src-pages-markdown-remark-frontmatter-slug-tsx",
    "path": "/blog/monthly-log/2019-11/",
    "result": {"data":{"markdownRemark":{"html":"<h4>11/24 - 11/30</h4>\n<h4><code>Date Picker</code></h4>\n<ul>\n<li><code>moment</code>나 <code>Date</code> 날짜 형식 통일</li>\n<li><code>moment().valueOf()</code>가 서버시간이랑 같아서 추천</li>\n</ul>\n<h4><code>라이브러리</code></h4>\n<ul>\n<li>필요한 기능을 이해하고 꺼내서 쓰자</li>\n</ul>\n<h4>11/17 - 11/23</h4>\n<h4><code>Plus Ultra</code></h4>\n<ul>\n<li>이상을 향하여</li>\n<li>더 높은 곳을 향하여</li>\n<li>더 나아가다</li>\n<li>스페인 로마제국</li>\n</ul>\n<h4><code>ES6+ 비동기 및 에러핸들링</code></h4>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=o9JnT4sneAQ&#x26;feature=youtu.be\">유인동님의 FEConf</a></li>\n<li>에러는 발생을 해야 잡을 수 있다</li>\n<li>에러가 발생하지 않고 정상 작동 하는 것 처럼 보이도록 하는게 아니라 에러가 발생해야만 <code>try-catch</code>에서 에러를 핸들링 할 수 있다</li>\n<li>에러가 발생하면 이후 트랜잭션은 멈춰야하고 그래야 불필요한 데이터가 쌓이지 않는다</li>\n<li>그렇지만 가장 좋은 코드는 에러 핸들링을 하지 않은 것이다</li>\n<li>순수함수로 작성하여 에러를 발생 시키고 인자로 받는 데이터를 주는 쪽에서 에러 핸들링하여 주는것이 좋다</li>\n<li><code>에러를 표출해라</code></li>\n</ul>\n<h4><code>훅스란?</code></h4>\n<ul>\n<li>클래스형 컴포넌트에서 보다 쉽게 상태를 관리 할 수 있도록 함수형 컴포넌트 상태 관리</li>\n<li>useState - 상태와 상태를 바꿀 수 있는 함수 반환</li>\n<li>useEffect - 특정 상태가 변경 되면 동작하기를 원하는 경우</li>\n<li>useMemo - 특정 상태의 값이 변경 될때에만 새로 반환되는 값</li>\n<li>useCallback - useMemo와 동일하나 함수를 반환</li>\n</ul>\n<h4>11/10 - 11/16</h4>\n<h4><code>Node.js</code></h4>\n<ul>\n<li><code>express</code> v4.16 부터 <code>body</code> 데이터 받아오기 가능하여 <code>body-parser</code> 삭제</li>\n<li><code>POST API</code>에 넘어오는 데이터를 <code>request.body</code>로 사용 가능</li>\n</ul>\n<h4><code>호이스팅</code></h4>\n<ul>\n<li>현재 스코프에서 찾는다</li>\n<li>없으면 상위 스코프로 올라가서 찾는다</li>\n<li>없으면 더 상위 스코프로 올라가서 찾는다</li>\n</ul>\n<h4><code>Code coverage</code></h4>\n<ul>\n<li>테스트 코드 커버율</li>\n<li>프로젝트 내 coverage 폴더를 커밋해야하는가?</li>\n</ul>\n<h4><code>모듈 정의</code></h4>\n<ul>\n<li><code>CommonJs</code> vs <code>ES6</code></li>\n<li><code>require</code> vs <code>import</code></li>\n<li><code>babel</code>로 <code>ES6</code>를 <code>CommonJs</code>로 컴파일</li>\n<li>CommonJs이든 ES6든 모듈 선언하는 것은 한가지 방식으로 통일</li>\n</ul>\n<h4>11/3 - 11/9</h4>\n<h4><code>React hooks + Redux saga</code></h4>\n<ul>\n<li>자꾸 렌더링되는 컴포넌트</li>\n<li><code>useEffect</code>에 dependency 조건을 잘 체크해줘야하며 함수 호출의 경우 <code>useCallback</code>으로 재생성 안되게 방지</li>\n<li><code>react-hooks/exhaustive-deps</code> 설정했더니 자동 수정되고 커밋</li>\n<li>의도와는 전혀 다르게 조건이 추가되어버린다</li>\n<li>다른 사람들도 이게 불편함을 느꼈는지 <a href=\"https://github.com/facebook/react/issues/15204\">깃허브 이슈 생성</a></li>\n</ul>\n<h4><code>Redux vs Mobx</code></h4>\n<ul>\n<li><code>React === Library</code> (상태관리, 라우터 등 자체적으로 지원하는게 없음)</li>\n<li>그러나 리액트 생태계는 <code>Framework</code> (상태관리, 라우터 안쓰는 프로젝트가 없음)</li>\n<li>리액트는 <code>상태 관리</code>를 위한 라이브러리!</li>\n<li><code>Redux</code>: 단방향 (angularjs: View model &#x3C;-> Container model 양방향이지만 누가 누굴 바꾸는건지 모르겠음)</li>\n<li>부모 -> 자식: 자식 <code>state</code>를 변경하려면 부모가 <code>props</code> 전달</li>\n<li>자식 -> 부모: 자식이 부모의 <code>state</code> 변경은 못함</li>\n<li>그래서 <code>redux</code> 필요</li>\n<li>완전 조상님급 바깥에 존재하는 redux에서 state 관리</li>\n<li><code>Action -> dispatch -> middleware -> reducer -> store(state)</code>: 단방향</li>\n<li><code>middleware</code>: 사이사이 기능 추가 (ex. 비동기 처리를 위한 미들웨어 Redux-thunk, redux-saga)</li>\n<li><a href=\"https://www.youtube.com/watch?v=sBda75wojt4&#x26;list=PLcqDmjxt30Rv-M6nWVS6xRABBYpjYyt-O&#x26;index=1\">제로초님의 유튜브 강의</a></li>\n</ul>\n<h4>한달동안</h4>\n<ol>\n<li><a href=\"https://jiggag.github.io/10%EC%9B%94-%ED%95%9C%EB%8B%AC%EB%8F%99%EC%95%88/\"><code>10월 한달동안</code></a></li>\n<li><a href=\"https://jiggag.github.io/11%EC%9B%94-%ED%95%9C%EB%8B%AC%EB%8F%99%EC%95%88/\"><code>11월 한달동안</code></a></li>\n<li><a href=\"https://jiggag.github.io/12%EC%9B%94-%ED%95%9C%EB%8B%AC%EB%8F%99%EC%95%88/\"><code>12월 한달동안</code></a></li>\n</ol>","frontmatter":{"slug":"/blog/monthly-log/2019-11","date":"2019년 12월 4일","title":"11월 한달동안 로그"}}},"pageContext":{"id":"8a1e2b2e-ba5f-5f9a-b24a-068c87f848fb","frontmatter__slug":"/blog/monthly-log/2019-11","__params":{"frontmatter__slug":"blog"}}},
    "staticQueryHashes": ["3000541721","3293771174"]}