{
    "componentChunkName": "component---src-pages-markdown-remark-frontmatter-slug-tsx",
    "path": "/blog/monthly-log/2021-07/",
    "result": {"data":{"markdownRemark":{"html":"<h2><code>7/26 ~ 7/31</code></h2>\n<h4><code>한마디씩</code></h4>\n<ul>\n<li>모듈을 전부 의존성 추가해주고 관리해줘야하니깐 node 버전부터 해서 그 환경을 바로 도커로 관리하면 환상의 짝꿍 node + docker라는데,,,</li>\n<li>우리가 제어할 수 없는 로직은 바깥에서 값을 받아서 로직을 분리해서 테스트 가능하도록 최대한 바깥으로 밀어낸다</li>\n<li>근데 매주 기록하던 스터디가 끝나니깐 괜히 허전 <code>엘레강트</code>는 언제쯤?</li>\n</ul>\n<h4><code>iOS 빌드 실패</code></h4>\n<ul>\n<li><code>RealmSwift</code> 추가하고 코코아팟 오류 나길래</li>\n<li><code>use_modular_headers!</code> + <code>pod 'RealmSwift', :modular_headers => true</code></li>\n<li>근데도 항상 빌드는 어렵지</li>\n<li><code>Import of module 'glog.glog.log_severity' appears within namespace 'google'</code></li>\n<li><a href=\"https://github.com/facebook/react-native/issues/26217#issuecomment-536118532\">참고: 깃허브 RN 이슈</a></li>\n<li>예전에도 본 것 같다</li>\n<li>근데 이게 해결방법이 아니였다?</li>\n<li><code>The Swift pod 'RealmSwift' depends upon 'Realm', which do not define modules. To opt into those targets generating module maps (which is necessary to import them from Swift when building as static libraries), you may set 'use_modular_headers!' globally in your Podfile, or specify ':modular_headers => true' for particular dependencies.</code></li>\n<li>커맨드로 빌드하면 이런 에러메세지가 뜨길래 위의 header 설정을 해준건데...</li>\n<li>그냥 에러메세지를 검색하다보니 <a href=\"https://stackoverflow.com/questions/56114345/using-static-libraries-in-swift-with-cocoapods-fails-for-realm\">버전을 명시</a>했는데 그 버전이 무려 <code>3.17</code>?</li>\n<li><a href=\"https://docs.mongodb.com/realm-legacy/docs/swift/latest/#installation\">Realm Swift</a> 최신 버전은 <code>10.5.1</code>인데</li>\n<li>그래서 다시 시작하는 마음으로</li>\n<li>\n<pre><code>  pod 'RealmSwift', '~> 10.5.1', :modular_headers => true\n  pod 'Realm', '~> 10.5.1', :modular_headers => true\n</code></pre>\n</li>\n<li>마저도 안되는구나...</li>\n<li><code>\"protocol descriptor for Swift.Identifiable\", referenced from: protocol requirements base descriptor for RealmSwift.ObjectKeyIdentifiable in libRealmSwift.a(Combine.o)</code></li>\n<li>왜 ㅠㅠㅠ</li>\n<li>에러메세지를 다르게 검색해보아도 <a href=\"https://github.com/realm/realm-js/issues/3588#issuecomment-780003008\">증상은 나와 똑같은데... 왜 저만 안되는건가요</a></li>\n<li>다른 Starter 프로젝트에 시도해봤더니 이번에는 <a href=\"https://github.com/facebook/flipper/issues/834\">Flipper 오류</a></li>\n<li>그래도 이번건 희망이 보여서 다시 시도!</li>\n<li>기존에 <code>Flipper (~> 0.75.1)</code>이였는데 버전을 명시해서 <code>Flipper (= 0.92.0)</code>로 바꿔보았다</li>\n<li><code>그래도 최종 보스 에러 메세지는 \"protocol descriptor for Swift.Identifiable.....\"</code></li>\n<li>Swift Package Manager도 안된다.......</li>\n<li><a href=\"https://github.com/joncardasis/cocoapods-user-defined-build-types\"><code>cocoapods-user-defined-build-types</code></a>로 해결</li>\n<li><code>pod \"RealmSwift\", :build_type => :dynamic_framework</code></li>\n<li><a href=\"https://medium.com/@joncardasis/swift-dynamic-frameworks-react-native-3d77c4972f32\">플러그인으로 빌드 타입을 각각 설정</a></li>\n<li>기본적으로 코코아팟이 static과 dynamic을 동시에 지원하지 않아서 플러그인을 설치해서 각각 빌드타입을 설정해주었다</li>\n</ul>\n<h2><code>7/19 ~ 7/25</code></h2>\n<h4><code>엘레강트 오브젝트</code></h4>\n<ul>\n<li>다음 스터디로 이 책을 읽어보기로 했다</li>\n<li>코틀린 스터디를 하면서 기술적인 내용만 오고 갔다면 이번에는 각자의 의견도 주고 받을 수 있도록 목표하고 있다</li>\n<li>물론 이 책을 선택한 계기는 <code>오브젝트</code>랑 고민이 있었는데 마침 <a href=\"https://www.youtube.com/watch?v=51xsW7fH7fU\">개발바닥 유튜브</a>에서 이 책을 그냥 언급했을뿐인데 찾아보니 얇아서!? 선택하게 되었다</li>\n<li>가볍게 읽어가자는 의미에서 얇은 책을 선택한 깊은 뜻 없는 그냥 그런 이야기</li>\n<li>1장을 읽어보았는데 아직까지는 어려움 없이 OOP에 대해 생각해볼 수 있을것 같다</li>\n<li>생각대로 되지는 않겠지만..</li>\n</ul>\n<h4><code>iOS swift 적용하기</code></h4>\n<ul>\n<li>한번 해보니 <code>java -> kotlin &#x3C;&#x3C;&#x3C;&#x3C; objc -> swift</code></li>\n<li>그래서 프로젝트마다 적용하고는 있는데</li>\n<li>각각 다른 라이브러리를 사용했더니 설정해주는게 너무 다르다</li>\n</ul>\n<h4><code>빌드</code></h4>\n<ul>\n<li>스테이징으로 디바이스 빌드해서 확인할 수 있는 것을 굳이 코드푸시로 배포했다...</li>\n<li>하고 나니 생각나는 아쉬운 선택</li>\n<li>왜그랬어!</li>\n</ul>\n<h4><code>iOS swift - DEBUG flag</code></h4>\n<ul>\n<li><code>DEBUG</code>이면 코드푸시 번들을 가져오도록 조건이 구성되어있었는데 이 로직이 계속 디버그가 아니라고 뜨고 있었다</li>\n<li>아니 디버그가 아니면 그럼 뭐지????</li>\n<li>설마?</li>\n<li><code>#if DEBUG</code> 이 코드가 RN의 <code>__DEV__</code> 같은 것이라 생각했는데 아니였다...</li>\n<li><a href=\"https://eunjin3786.tistory.com/219\">iOS Compilation Conditions - Flag 설정</a></li>\n<li>플래그가 없으니 <code>if DEBUG</code>가 당연히 false인것</li>\n<li>근데... 원래 쓰던 DEBUG인데? objc에서도 해당 플래그에 따라 분기를 타고 있었는데 왜 swift로 왔다고 안되는걸까</li>\n</ul>\n<h2><code>7/12 ~ 7/18</code></h2>\n<h4><code>RN + swift</code></h4>\n<ul>\n<li>지난번에 안드로이드는 kotlin으로 바꿨고 이번에는 iOS를 swift로 바꾸기 도전</li>\n<li>라이브러리 쓰다보면 swift로 되어있는 경우 <code>Bridging-Header</code>를 추가해서 objc + swift 같이 사용할 수 있도록 해주었는데 이번에도 동일하다</li>\n<li>왜냐하면 RN NativeModules을 구현한 RCTBridgeModuled은 objc니까 둘 다 지원해야해서</li>\n<li>Bridging-Header에는 objc에서 가져와서 사용하려는 것들을 import 시킨다 => 이 친구가 연결고리</li>\n<li>기존의 AppDelegate.m을 AppDelegate.swift로 구현</li>\n<li>근데 flipper랑 codepush를 swift로 가져오는게 잘 안된다ㅠㅠ</li>\n<li>flipper는 Bridging-Header에 그대로 남겨두었는데 codepush는 어쩌지</li>\n<li>프로덕션인 경우에만 코드푸시 번들을 가져와서 쓰도록 조건을 걸고 싶은데 왜 안된다는거야~~~~~🙀</li>\n<li>xcode에서는 코드푸시가 자꾸 nil이 떠서 오류나고 있길래 커맨드로 빌드했더니 이번에는 빌드 조차 되지 않는다</li>\n<li>아 설마?</li>\n<li>전에 빌드가 안되서 react-native patch를 했는데 이번에도?</li>\n<li>그러했다</li>\n</ul>\n<h4><code>Serialize</code></h4>\n<ul>\n<li>Serialize => Data를 byte로, json object를 stringify로</li>\n<li>Deserialize => byte를 Data로, json string를 parser로</li>\n</ul>\n<h4><code>activity</code></h4>\n<ul>\n<li><code>android.util.AndroidRuntimeException: Calling startActivity() from outside of an Activity  context requires the FLAG_ACTIVITY_NEW_TASK flag. Is this really what you want?</code></li>\n<li>스터디 프로젝트에 카카오 로그인을 네이티브로 붙이려고 하는데 위와 같은 오류가 발생했다</li>\n<li><code>AndroidManifest</code>에 <code>MainActivity</code> 외에 <code>com.kakao.sdk.auth.AuthCodeHandlerActivity</code>를 추가한 상황</li>\n<li><a href=\"https://github.com/react-native-seoul/react-native-kakao-login/blob/master/android/src/main/java/com/dooboolab/kakaologins/RNKakaoLoginsModule.kt\">참고: 우선 기존 라이브러리 코드 검색해서 이해하기</a></li>\n<li>fragment는 뭐가 다른거지</li>\n<li><a href=\"https://readystory.tistory.com/199\">참고: fragment 라이프사이클</a></li>\n</ul>\n<h2><code>7/5 ~ 7/11</code></h2>\n<h4><code>metro.config.js</code></h4>\n<ul>\n<li>RN을 위한 js bundler</li>\n<li>RN 개발하다보면 metro server 오류가 뜨면 그냥 치는 <code>--reset-cache</code> 옵션도 metro 캐시를 날리는 것</li>\n<li>A프로젝트 개발하다가 메트로 서버 안끄고 바로 B프로젝트 앱을 들어가면 메트로 서버가 번들 파일이 이상하니깐 앱이 실행이 안된다</li>\n<li>아니면 tsconfig에 import path 바꿔주면 한번씩 캐시를 날려주고 재시작했었는데 이게 다 메트로 번들 영향이였다</li>\n<li><a href=\"https://facebook.github.io/metro/docs/caching/#why-cache\">metro cache</a></li>\n<li>메트로 서버에 캐시를 저장하고 공유하는데 모든 서버를 돌면서 찾아서 가져오고 캐싱 또한 모든 서버를 돌면서 다시 저장한다</li>\n<li>로컬이든 원격이든 모든 서버에 캐시를 저장해서 번들러가 캐시를 가져와서 빌드 시간을 빠르게 해준다</li>\n<li>(+<code>watchman</code>으로 파일 변경을 감지하는데 변경되면 번들을 다시하고 RN reload)</li>\n</ul>\n<h2><code>7/1 ~ 7/4</code></h2>\n<h4><code>package list</code></h4>\n<ul>\n<li>MutableList..........!!</li>\n<li><code>MainApplication.java -> kotlin</code> 변경하면서 reactPackage 추가하는 부분도 잘 바꿨다고 생각했다</li>\n<li>그러나 <code>autolinking</code>이 안되고 있어서 package를 추가하는 <code>react-native link</code>를 수동으로 작업해주었다</li>\n<li>지난주에 <code>react-native.config.js</code>에 <code>mainFilePath</code>를 설정해주면서 autolinking 문제를 해결했다고 생각했는데</li>\n<li>여전히 라이브러리를 찾을 수 없다고 앱을 실행하면 오류가 나고 있었다</li>\n<li>\n<pre><code class=\"language-kt\">  override fun getPackages(): List&#x3C;ReactPackage> {\n  \treturn listOf&#x3C;ReactPackage>(\n    RNScreensPackage(),\n    RNGestureHandlerPackage(),\n    )\n  }\n</code></pre>\n</li>\n<li>이런 식으로 작성을 해주고 직접 라이브러리를 추가해줘야만 정상적으로 패키지를 가져왔다</li>\n<li>왜 그럴까? 초기 코드 상태를 보니 살짝 다른게 보였다</li>\n<li>\n<pre><code class=\"language-java\">  List&#x3C;ReactPackage> packages = new PackageList(this).getPackages();\n</code></pre>\n</li>\n<li>자바에서 <code>List&#x3C;ReactPackage></code>로 되어있어서 자연스럽게 코틀린으로 가져왔다</li>\n<li>그리고 의심하지 않고 <code>List</code>를 썼는데 여기서 큰 오류를 심었다</li>\n<li>자바 <code>List</code>를 들어가보면 분명 <code>add</code>가 있지만 코틀린의 <code>List</code>에는 <code>add</code>가 없다</li>\n<li>\n<pre><code class=\"language-kt\">  override fun getPackages(): List&#x3C;ReactPackage> {\n  val packages: MutableList&#x3C;ReactPackage> = PackageList(this).packages\n  return packages\n}\n</code></pre>\n</li>\n<li>조금이 아니고 크게 보인다 <code>MutableList</code></li>\n<li>갑자기 이해가 되려는 듯</li>\n<li>패키지를 <code>autolinking</code>으로 추가되어야하는데 내가 사용한 <code>listOf는 mutable이 아니였다</code></li>\n</ul>\n<h4><code>kotlin DSL</code></h4>\n<ul>\n<li>어디서 쓸까 했던 DSL 여기서 쓴다</li>\n<li><a href=\"https://proandroiddev.com/migrate-from-groovy-to-kotlin-dsl-951266f3c072\">참고: groovy를 kotlin dsl로 마이그레이션</a></li>\n</ul>","frontmatter":{"slug":"/blog/monthly-log/2021-07","date":"2021년 8월 1일","title":"7월 한달동안 로그"}}},"pageContext":{"id":"38d45570-23c2-595e-9ed7-fa39781afa29","frontmatter__slug":"/blog/monthly-log/2021-07","__params":{"frontmatter__slug":"blog"}}},
    "staticQueryHashes": ["3000541721","3293771174"]}