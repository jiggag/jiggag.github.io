{
    "componentChunkName": "component---src-pages-markdown-remark-frontmatter-slug-tsx",
    "path": "/blog/monthly-log/2022-02/",
    "result": {"data":{"markdownRemark":{"html":"<h2><code>읽어보았던</code></h2>\n<ul>\n<li><a href=\"https://attardi.org/why-we-memo-all-the-things/\">Why We Memo All the Things</a>\n<ul>\n<li>퍼포먼스 이슈가 발생하는 상황에서 memo를 사용하면 충분히 개선할 수 있었다</li>\n<li>언제 어디서 어떤 이유로 리렌더 되고 있는지 모른다\n<ul>\n<li><a href=\"https://blog.px.dev/ui-performance/\">Faster React Apps With Memoization</a></li>\n<li><a href=\"https://medium.com/welldone-software/why-did-you-render-mr-big-pure-react-component-2a36dd86996f\">Why Did You Render Mr. Big Pure React Component? Part 1</a></li>\n<li><a href=\"https://medium.com/welldone-software/why-did-you-render-mr-big-pure-react-component-part-2-common-fixing-scenarios-667bfdec2e0f\">Why Did You Render Mr. Big Pure React Component Part 2- Common Fixing Scenarios</a></li>\n<li><code>&#x3C;jsx prop='a'/> 는 React.createElement('jsx', {prop: 'a'}) 이다</code></li>\n<li>부모 컴포넌트가 리렌더 되면 children도 다 리렌더 된다..!</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"https://devsdk.github.io/ko/development/2021/03/08/ReflowRepaint.html\">Reflow, Repaint Chromium 입장에서 살펴보기 (왜 transform은 빠를까?)</a>\n<ul>\n<li>Layout: 화면에 그리기 위한 좌표 계산</li>\n<li>Paint: Layout을 화면에 그리는 단계</li>\n<li>Composite: 각각 분리할 수 있는 레이어를 동기적으로 실행한 후 합성 (transform, scroll)</li>\n<li>비용: Layout > Paint > Composite</li>\n<li><code>심지어 Main Thread가 다른 태스크에 의해 block 되어도 재생된다.</code></li>\n<li><a href=\"https://devsdk.github.io/ko/development/2021/03/29/blink-render-composition.html\">Chromium Composition과 Layer</a>\n<ul>\n<li>Layout이 변경되는 것을 최소화하고 싶은데 Composite에서 처리할 수 있는 것들로 잘 대체하는 할 수 있을까</li>\n<li>우선 안보이게 처리하는 것을 opacity로 한다면? (opacity 0 -> 1 -> 0)</li>\n<li>수많은 뷰에서 width/height 변경이 일어난다면 퍼포먼스는 어떻게 될까?</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2><code>2/27 ~ 2/28</code></h2>\n<h4><code>라즈베리파이</code></h4>\n<ul>\n<li>살렸다</li>\n<li>와이파이를 못잡아서 랜선 연결부터 다시 했다</li>\n<li>근데... ip가 변경되어버렸다</li>\n<li>디비 연결이... 도메인 연결이...</li>\n<li>안되고 있었는데 되네 🙈</li>\n<li>와이파이 채널이 변경되었는지 라즈베리가 와이파이를 잡지 못하고 있던건지 왜 연결이 끊긴건지 모르겠다</li>\n<li>다시 설정해주려고 <code>wpa_supplicant</code> 업데이트 했는데, 기존에 설정을 그대로 복사해서 들고 있었더니 탭으로 뎁스가 제대로 들어가지 않았던 것도 그동안 간단하게 해결하지 못한 이유 갖기도..!</li>\n<li>우선 탭 뎁스 설정하고 와이파이 채널 변경하는 것으로 해결했는데, 아무래도 뎁스가 문제였던듯!</li>\n</ul>\n<h4><code>다시 Starter</code></h4>\n<ul>\n<li>왜 안드로이드 빌드가 죽나 봤더니</li>\n<li>flipper 연결해둔게 문제</li>\n<li>왜지!</li>\n<li><a href=\"https://github.com/facebook/flipper/issues/3284\">여기 flipper 이슈가 따당</a></li>\n<li>릴리즈빌드에서는 당연히 flipper가 필요없으니 정상적으로 실행되는데...</li>\n<li>정말 알 수 없다</li>\n</ul>\n<hr>\n<h2><code>2/20 ~ 2/26</code></h2>\n<h4><code>type-challenges</code></h4>\n<ul>\n<li>드디어 시작했다</li>\n<li>타입을 제한해서 강제하기</li>\n</ul>\n<h4><code>리액트쿼리 디버거</code></h4>\n<ul>\n<li>왜 query fetch만 하면 느리지?</li>\n<li>온갖 디버거가 퍼포먼스 잡아먹고 있었다</li>\n</ul>\n<h4><code>리액트쿼리</code></h4>\n<ul>\n<li>지난달 벌써? (시작한 날짜를 보니 1/16)</li>\n<li>리액트쿼리와 한판 하면서 의식의 흐름을 정리해두고 있었는데</li>\n<li>내가 쓴 글을 다시 읽으면 더 헷갈려보이는 매직</li>\n<li>정리를 다시 해야겠다고 생각하고</li>\n<li>이런저런 바쁘다는 시간이 흘러 아직 마무리하지 못한 상태에서</li>\n<li>어느날 뜨끔하고 다가온 <a href=\"https://www.youtube.com/watch?v=MArE6Hy371c&#x26;feature=youtu.be\">세미나</a></li>\n<li>세상 깔끔</li>\n</ul>\n<hr>\n<h2><code>2/13 ~ 2/19</code></h2>\n<ul>\n<li>문제에 대한 답을 찾아야하는게 아니라 해결을 해야함 🧩</li>\n</ul>\n<h4><code>안드로이드 제스처</code></h4>\n<ul>\n<li>PanGesture로 RN에서 이벤트 핸들링하고 있는데 의도대로 잘 안되는게</li>\n<li><code>그 있잖아 차라락 스크롤 하다가 놓으면 그대로 쭈우욱 가는거</code></li>\n<li><a href=\"https://thankee.tistory.com/117\"><code>pan > swipe > flick</code></a></li>\n<li>그럼 flick을 구현하면 되겠네? 하면서 시작</li>\n<li>안드로이드 스크롤 이벤트를 어떻게 잡지? 하면서 <a href=\"https://developer.android.com/training/gestures/scale#pan\">안드로이드 제스처 드래그 확인</a></li>\n<li><a href=\"https://developer.android.com/training/gestures/scroll#term\">스크롤 동작 애니메이션 처리</a> 에서 <code>살짝 튕기기 onFling</code> 을 발견!</li>\n<li>이거다 이게 필요한건데</li>\n<li>이걸 네이티브에서 꺼내다 호출하면 되겠지!</li>\n<li>하고 있었는데.... 아주 간단하게 해결</li>\n<li>그냥 제스처이벤트를 안잡으면 되는 것을 하마터면 먼길 떠날뻔</li>\n</ul>\n<h4><code>뭐지</code></h4>\n<ul>\n<li>라즈베리 서버 죽었다</li>\n<li>언제 죽었지</li>\n<li>그게 아니라 아예 사라져버렸네!</li>\n<li>무언가 설정이 변경된듯</li>\n<li>살려야하는데 내가 먼저 죽겠다</li>\n<li>지난번에 sentry 오류 났던걸 보면 얼마 안지났네</li>\n</ul>\n<hr>\n<h2><code>2/6 ~ 2/12</code></h2>\n<h4><code>아니</code></h4>\n<ul>\n<li>맥북을 열어보지도 못햇네...!</li>\n</ul>\n<h4><code>CircleCI</code></h4>\n<ul>\n<li>CircleCI iOS 빌드</li>\n<li>무료버전이라서 안드로이드만 빌드했던건 이제 추억이</li>\n</ul>\n<hr>\n<h2><code>2/1 ~ 2/5</code></h2>\n<h4><code>memo</code></h4>\n<ul>\n<li>다시 생각해보아도 memo가 좋지 않나</li>\n<li>메모리 낭비가 될 수 있지만 그 메모리가 과연 의도치 않은 리렌더 보다 클까?</li>\n<li>이럴때면 다시 생각나는 <a href=\"https://github.com/welldone-software/why-did-you-render\">why-did-you-render</a></li>\n<li>처음 사용한 코드는 엄청난 리렌더 로그로 도저히 확인하고 대응할 수 있는 양이 아니였다</li>\n<li>그렇게 꺼놓고 조금씩 작업하면서 잊게 되었다</li>\n<li>이번에 다시 붙여보면 어떨까</li>\n<li>엄청 많이 업데이트 되었다 버전이 거의 더블</li>\n<li><a href=\"https://attardi.org/why-we-memo-all-the-things/\">why-we-memo-all-the-things</a></li>\n<li><a href=\"https://blog.px.dev/ui-performance/\">ui-performance</a></li>\n<li><a href=\"https://junghan92.medium.com/%EB%B2%88%EC%97%AD-memoization%EC%9C%BC%EB%A1%9C-%EB%8D%94-%EB%B9%A0%EB%A5%B8-react-apps-%EB%A7%8C%EB%93%A4%EA%B8%B0-bcacaee7c97e\">번역이 있었군...!</a></li>\n</ul>\n<h4><code>linear-gradient</code></h4>\n<ul>\n<li>피그마의 <code>linear-gradient</code> 를 <a href=\"https://github.com/react-native-linear-gradient/react-native-linear-gradient\"><code>RNLinearGradient</code></a> 로 그려야하는데 잘못 그리고 있었다</li>\n<li><a href=\"https://stackoverflow.com/questions/66365943/how-to-convert-figma-linear-gradient-to-react-native-code\">내가 잘못 변환한 것!</a></li>\n<li><a href=\"https://github.com/react-native-linear-gradient/react-native-linear-gradient#transparent-gradient\">내가 잘못 생각한 것! transparent는 rgb + alpha=0 와 다르다</a></li>\n<li>하나의 <code>hexcode</code> 를 <code>alpha</code> 만 다르게 주기 위해서, <code>rgba</code> 로 변환 후 그려주면 되겠다</li>\n</ul>\n<h4><code>requestAnimationFrame</code></h4>\n<ul>\n<li><code>scrollTo + transform</code> 이 동시에 일어나야하는데\n<ul>\n<li>ScrollView가 기다랗게 나열되어 있고 WrapperView가 카메라 시야인 형태</li>\n<li>WrapperView를 통해서만 ScrollView의 내용을 볼 수 있다</li>\n<li>WrapperView가 transform 하여 ScrollView의 다음 인덱스를 보여주고 있다가</li>\n<li>ScrollView의 scrollTo로 인덱스가 넘어가고 WrapperView의 transform이 원래 위치로 돌아오는 형태</li>\n</ul>\n</li>\n<li>하지만 <code>scrollTo + transform</code> 를 일반적으로 구현하면 iOS에서는 정상 동작하는데 왜 안드로이드에서 애니메이션이 각각 다른 프레임에서 동작하는 느낌이다\n<ul>\n<li>\n<pre><code class=\"language-tsx\">  scrollView.scrollTo();\n  wrapperView.transform();\n</code></pre>\n</li>\n<li>transform으로 이전 인덱스 위치로 WrapperView가 넘어가고 나서야 scrollTo가 동작하는 순서</li>\n</ul>\n</li>\n<li>우선 같은 프레임을 돌려보고자 찾다가 <code>requestAnimationframe</code> 으로 아주 간단하게 해결되었다 ⁉️\n<ul>\n<li>위에 문제가 되는 scrollTo보다 transform이 먼저 발생하는 것을 해결하고자</li>\n<li><code>scrollTo</code> 는 그대로 두고 <code>requestAnimationFrame(transform)</code> 으로 감싸주었다</li>\n<li>\n<pre><code class=\"language-tsx\">  scrollView.scrollTo();\n  requestAnimationFrame(() => wrapperView.transform());\n</code></pre>\n</li>\n<li>그러나 이 방법을 사용하면 안드로이드는 해결되었는데 프레임 문제가 iOS에서 재발하였다</li>\n<li>오히려 iOS에서는 <code>scrollTo</code> 가 먼저 실행되고 <code>transform</code>이 동작해버리는 느낌</li>\n<li>이 차이는 무엇인가?</li>\n</ul>\n</li>\n<li>근데 왜 iOS에서는? 무언가 다른 점이?\n<ul>\n<li><a href=\"https://github.com/facebook/react-native/blob/113f8257ce1cb28929e92da2d3c81c413e0d4396/Libraries/Core/Timers/JSTimers.js#L258\">RN 내부에서 <code>requestAnimationFrame</code>는 결국 <code>setTimeout(fn, 1)</code> 이였다</a></li>\n<li><a href=\"https://github.com/facebook/react-native/blob/8bd3edec88148d0ab1f225d2119435681fbbba33/React/CoreModules/RCTTiming.mm#L334\">iOS RCTTiming.createTimer에서 time=1이면 다음 프레임에 실행하도록 구현되어있다</a></li>\n<li><a href=\"https://github.com/facebook/react-native/blob/8bd3edec88148d0ab1f225d2119435681fbbba33/React/CoreModules/RCTTiming.mm#L366\">iOS 타이머 targetTime 재설정</a></li>\n<li><a href=\"https://github.com/facebook/react-native/blob/8bd3edec88148d0ab1f225d2119435681fbbba33/React/CoreModules/RCTTiming.mm#L367\">iOS setInterval이 되는 최소 시간 0.018?!</a></li>\n<li><a href=\"https://github.com/facebook/react-native/blob/8bd3edec88148d0ab1f225d2119435681fbbba33/ReactAndroid/src/main/java/com/facebook/react/modules/core/JavaTimerManager.java#L337\">안드로이드도 타이머 adjustedDuration 재설정?</a></li>\n<li>타이머의 targetTime이랑 duration을 재설정하는건 의미가 다르지 않나...?</li>\n<li><a href=\"https://github.com/facebook/react-native/blob/8bd3edec88148d0ab1f225d2119435681fbbba33/ReactAndroid/src/main/java/com/facebook/react/modules/core/JavaTimerManager.java#L299\">안드로이드도 여기서 targetTime을 초기화</a></li>\n</ul>\n</li>\n<li>안드로이드에서는 이 <code>time=1</code> 설정이 <code>scrollTo</code> 와 <code>transform</code> 을 같은 프레임에서 동작하도록 transform을 미뤘는데, iOS는 같은 프레임에서 동작하던 것을 오히려 다른 프레임으로 넘어가버린 것이다\n<ul>\n<li>scrollTo가 발생하면 reflow(layout)이 발생한다</li>\n<li>transform은 reflow(layout), repaint(paint) 둘 다 발생하지 않는다 => <a href=\"https://devsdk.github.io/ko/development/2021/03/08/ReflowRepaint.html\">Composite</a></li>\n<li>scrollTo가 실행되서 layout+paint 과정이 필요하기 때문에 느려졌고</li>\n<li>중간에 transform이 되었다면 위에서 문제가 되었더 scrollTo보다 transform이 먼저 발생하는 이유가 해결된다</li>\n<li>그렇다면 iOS와 안드로이드의 차이는 무엇일까</li>\n<li>reflow, repaint 성능 차이일까...</li>\n</ul>\n</li>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/rendering/optimize-javascript-execution?hl=ko#%EC%8B%9C%EA%B0%81%EC%A0%81_%EB%B3%80%ED%99%94%EC%97%90_requestanimationframe_%EC%82%AC%EC%9A%A9\">🙈 시각적 업데이트에 setTimeout/setInterval 대신 requestAnimationFrame</a>\n<ul>\n<li><code>requestAnimationFrame으로 프레임 시작 시 실행되도록 보장하는 유일한 방법</code></li>\n<li>setTimeout/setInterval는 콜백이 프레임에서 특정 시점(종료 시)에 실행되고, 종종 프레임이 누락되어 버벅거림 현상이 발생할 수 있다</li>\n</ul>\n</li>\n</ul>\n<h4><code>* is not a function</code></h4>\n<ul>\n<li>어느날 갑자기 sentry 오류가 잡혔다</li>\n<li>없을리가 없는데 왜 갑자기?</li>\n<li>헐?</li>\n<li>node 서버를 commonjs -> es6로 작년 말에 변경했는데 한달만에 에러가 잡혔다...</li>\n<li>리팩터링 중간에 오류나서 이것저것 다시 하다가 날아가버린 코드가 있었다</li>\n<li>에러로그 날려주신 분 아니였으면 절대 몰랐을듯</li>\n<li>이 프로젝트에는 린트도 테스트도 타입스크립트도 안되어있어서 더 큰 문제였다</li>\n</ul>\n<h4><code>firebase app distribution</code></h4>\n<ul>\n<li><a href=\"https://firebase.google.com/docs/app-distribution/android/distribute-fastlane?authuser=0\">fastlane으로 배포하기</a></li>\n<li><a href=\"https://github.com/rubygems/rubygems/issues/4559#issuecomment-826333919\">bundle install 오류 (Permission denied @ dir_s_mkdir)</a></li>\n<li>지난번에도 같은 오류였는데 이렇게 해결되나?</li>\n<li><a href=\"https://firebase.google.com/docs/app-distribution/android/distribute-fastlane?authuser=0#google-acc-fastlane\">firebase login 설정</a></li>\n<li><code>build_app.export_method</code> 가 중요했다</li>\n<li>firebase에 등록한 테스트 디바이스를 위해서는 분명 provisioning도 그에 맞는 <code>Development</code>로 빌드가 되어야하는데</li>\n<li><code>export_method</code> 디폴트 설정인 <code>release</code>로 들어가니 <code>AppStore Provisioning</code>을 찾고 있었고 이걸로 빌드하면 당연히 등록되지 않은 디바이스라서 파베에서 다운 받을 수 없었다</li>\n</ul>","frontmatter":{"slug":"/blog/monthly-log/2022-02","date":"2022년 3월 1일","title":"2월 한달동안 로그"}}},"pageContext":{"id":"a05647eb-1bc9-5653-b906-ffb2bfbf3110","frontmatter__slug":"/blog/monthly-log/2022-02","__params":{"frontmatter__slug":"blog"}}},
    "staticQueryHashes": ["3000541721","3293771174"]}