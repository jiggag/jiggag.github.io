{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/blog/monthly-log/2022-07/","result":{"data":{"markdownRemark":{"html":"<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%9D%BD%EC%96%B4%EB%B3%B4%EC%95%98%EB%8D%98\"><code>읽어보았던</code></a></li>\n<li><a href=\"#724--731\">7/24 ~ 7/31</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#usecurring\"><code>useCurring</code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#717--723\">7/17 ~ 7/23</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#react18\"><code>React18</code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#710--716\"><code>7/10 ~ 7/16</code></a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#\">😯</a></li>\n<li><a href=\"#%EC%99%9C-react%EB%8A%94-%EC%84%B1%EA%B3%B5%ED%96%88%EB%82%98\"><code>왜 React는 성공했나</code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#73--79\"><code>7/3 ~ 7/9</code></a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%EC%A1%B0%ED%95%A9-%EC%B0%BE%EA%B8%B0\"><code>조합 찾기</code></a></li>\n<li><a href=\"#%EC%95%84%EB%8A%94%EA%B1%B0-%EB%94%B1-%ED%95%98%EB%82%98-%EC%9E%88%EB%8A%94%EB%8D%B0\"><code>아는거 딱 하나 있는데</code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#71--72\"><code>7/1 ~ 7/2</code></a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#flatlist\"><code>FlatList</code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"읽어보았던\" style=\"position:relative;\"><a href=\"#%EC%9D%BD%EC%96%B4%EB%B3%B4%EC%95%98%EB%8D%98\" aria-label=\"읽어보았던 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>읽어보았던</code></h2>\n<ul>\n<li><a href=\"https://velog.io/@eunbinn/Frontend-Web-Performance-The-Essentials-1\">[번역] 프런트엔드 웹 퍼포먼스: 필수 요소(1)</a>\n<ul>\n<li>메인스레드에서 실행이 아름답게 이뤄지기 위한 방안\n<ul>\n<li>응답하지 않거나 끊기는 애니메이션을 멀리하기 위해서는 이 메인 스레드 처리가 연속적이여야함</li>\n</ul>\n</li>\n<li>이벤트 루프에서 마이크로 + 매크로 태스크를 처리하는데, 우선순위가 높은 마이크로 태스크에 비동기 처리가 들어간다면?\n<ul>\n<li>마이크로 태스크에서 비동기 처리하는 동안 렌더링을 처리해야하는 매크로 태스크는 지연되고 이 과정에서 <code>화면은 끊긴다</code> ㅜㅜ</li>\n<li>그렇다면 이벤트 루프의 마이크로태스크를 효율적으로 이용하는 방안을 찾아봐야하는데</li>\n<li>(= 이벤트 루프 자체가 가볍게 훅훅 돌고 돌 수 있도록 🤡)</li>\n</ul>\n</li>\n<li>그 방안 중 하나로 <a href=\"https://velog.io/@eunbinn/Frontend-Web-Performance-The-Essentials-1#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%97%90-%EC%96%91%EB%B3%B4%ED%95%98%EA%B8%B0\">브라우저에 양보하기</a>\n<ul>\n<li>실행 시간이 긴 코드를 분할하여 중간중간 매크로 태스크가 실행될 수 있도록 하는 것</li>\n<li><code>requestAnimationFrame, setTimeout, setImmediate</code></li>\n<li>일반적으로 이런 상황에서 setTimeount을 쓰고 있었는데 이는 <code>일정 시간 지연 후 매크로 태스크 큐에 푸시</code>된다</li>\n<li>아직 사용해보지 않은 setImmediate는 <code>매크로 태스크 큐에 바로 푸시</code>하여 즉시 실행되도록 하는 것인데\n<ul>\n<li>그래서 setImmediate를 RN에서는 처리해줄까? 하는 의문과 즉시 실행할거라면 이걸 왜 써야하지? 하는 의문</li>\n</ul>\n</li>\n<li>애니메니션 프레임 단위로 처리하고 싶을때 requestAnimationFrame</li>\n</ul>\n</li>\n<li><a href=\"https://youtu.be/cCOL7MC4Pl0\">참고: jsconf 이벤트 루프 영상</a>\n<ul>\n<li><a href=\"https://youtu.be/cCOL7MC4Pl0?t=1802\">리스너가 어디에서 동작했을까?</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"https://junghan92.medium.com/%EB%B2%88%EC%97%AD-%EC%A3%BC%EC%9D%98-%EA%B9%8A%EA%B2%8C-xmlhttprequest-%EC%9E%AC%EC%8B%9C%EB%8F%84%ED%95%98%EA%B8%B0-2895dfa66b43\">(번역) 주의 깊게 XMLHttpRequest 재시도하기</a>\n<ul>\n<li>fetch 에러 발생 시 인터셉터에서 retry</li>\n<li>지금 구조에서는 횟수만 제한을 두고 refetch 하고 있는데</li>\n<li>글의 내용처럼 서버 에러가 발생한 상태에서 빠르게 재요청 하는 것은 무의미한 요청이였을지도 모른다는 생각이 든다</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"724--731\" style=\"position:relative;\"><a href=\"#724--731\" aria-label=\"724  731 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7/24 ~ 7/31</h2>\n<h4 id=\"usecurring\" style=\"position:relative;\"><a href=\"#usecurring\" aria-label=\"usecurring permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>useCurring</code></h4>\n<ul>\n<li>메모이제이션 + 파라미터 이슈로 계속 이어지는 테스트...\n<ul>\n<li>될 것 같은데 안되네 이거</li>\n<li>벌써 한달</li>\n</ul>\n</li>\n<li>클로저를 쓰면 기억할 수 있는거 아닌가????\n<ul>\n<li>이게 문제가 아니다</li>\n<li>디펜던시 변경 전까지 해당 콜백은 변함이 없어야하는데</li>\n<li>하나의 콜백을 여러 사용처에서 파라미터만 다르게 사용하는 경우에</li>\n<li>파라미터를 사용처마다 다르게 기억해야한다</li>\n</ul>\n</li>\n<li>이걸 클로저로 해당 상태를 기억하게 하려고 했는데...</li>\n<li>무언가 문제가 따로 있다</li>\n<li>리턴되는 콜백의 레퍼런스가 변경되면 또 다시 리렌더를 발생시킨다</li>\n<li>이 훅을 통째로 props 전달하는 경우에는 문제가 되지 않는다\n<ul>\n<li>통째로 하나의 레퍼런스를 갖고 있기 때문에</li>\n</ul>\n</li>\n<li>하지만 커링 함수의 목적은 쪼개기 위함인데... 쪼개서 넘기는 경우에 문제가 있다\n<ul>\n<li>쪼개진 콜백이 매번 새로운 콜백을 반환하면 레퍼런스가 변경되면서 리렌더 발생시킨다</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"717--723\" style=\"position:relative;\"><a href=\"#717--723\" aria-label=\"717  723 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7/17 ~ 7/23</h2>\n<h4 id=\"react18\" style=\"position:relative;\"><a href=\"#react18\" aria-label=\"react18 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>React18</code></h4>\n<ul>\n<li><a href=\"https://github.com/facebook/react/blob/main/CHANGELOG.md#1800-march-29-2022\">react18 변경사항을 문서</a>로 읽기는 했지만</li>\n<li>잘모르겠다!</li>\n<li><a href=\"https://youtu.be/focpJqfSu4k\">영상으로 설명해주는걸 듣고 싶어서 (문득 영상 올라온거 보고)</a></li>\n<li><code>useTransition</code>\n<ul>\n<li>렌더링 요청이 여러번 호출된 경우 이를 처리하기 위해 다른 작업이 블로킹하고 오직 렌더링 연산만 처리 한다 (= 블로킹 렌더링)</li>\n<li>이때 여러번 요청된 상태 업데이트가 화면에 바로 반영되지 않는 문제가 발생한다\n<ul>\n<li>ex) 상태 업데이트 요청 > 변경된 상태에 따른 렌더링 요청 > 이게 여러번 반복되는 경우 > 밀린? 쌓인? 렌더링을 처리를 하기 위해 실제 상태 업데이트에 따른 화면 업데이트가 발생하지 못함</li>\n</ul>\n</li>\n<li>이를 해결하기 위해 <code>useTransition</code>의 <code>startTransition</code>으로 렌더링 업데이트를 요청하는 상태 변경 함수를 감싸는 것</li>\n<li>화면 업데이트 중간에 사용자의 상태 업데이트를 받는 경우 렌더링 처리를 중단하고 이를 처리한 뒤 다시 렌더링을 처리하는 것</li>\n<li>애니메이션 처리를 프레임 단위로 사이사이 호출하도록 하는 것과 같은 느낌이다</li>\n</ul>\n</li>\n<li><code>Automatic Batching</code>\n<ul>\n<li>여러 상태 업데이트를 한번에 모아모아 리렌더 발생하도록 그룹화\n<pre><code class=\"language-jsx\">const callback = useCallback(() => {\n  setState((prev) => prev + 1); // 1\n  setState((prev) => prev + 2); // 2\n}, []);\n</code></pre>\n</li>\n<li>위와 같은 상태에서 1,2번 상태 업데이트가 발생했을때 각각 리렌더를 발생시키지 않고 딱 한번의 리렌더로 처리하는 것이다</li>\n<li>이미 react17에서 대응하였으나 동기 처리 지원했다고 한다\n<ul>\n<li>아래와 같은 경우 상태 업데이트 2번에 대하여 각각 리렌더가 발생하였다\n<pre><code class=\"language-jsx\">const callback = useCallback(() => {\n  setTimeout(() => {\n    setState((prev) => prev + 1);\n    setState((prev) => prev + 2);\n  }, 0);\n}, []);\n</code></pre>\n</li>\n<li>이를 react18에서 모두 automatic batching 지원하게 된 것</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>flushSync</code>\n<ul>\n<li>이를 사용할 예시를 아직 생각해내지 못했는데 <code>Automatic Batching</code>에서 상태 업데이트에 따른 리렌더 그룹화를 해제하는?</li>\n<li>상태 업데이트 각각 리렌더 되도록 하는 목적이 있다\n<pre><code class=\"language-jsx\">const callback = useCallback(() => {\n  flushSync(() => {\n    setState((prev) => prev + 1); // 1\n  });\n  flushSync(() => {\n    setState((prev) => prev + 2); // 2\n  });\n}, []);\n</code></pre>\n<ul>\n<li>이렇게 되면 기본적으로 react18에서는 상태 업데이트에 따른 리렌더가 그룹화되어 1번 발생해야하지만</li>\n<li><code>flushSync</code>로 감싸진 상태 변경을 그룹화하지 않고 각각 1, 2에 따른 리렌더가 2번 발생하게 된다</li>\n</ul>\n</li>\n<li>그럼 일부만 <code>flushSync</code>를 사용하면 어떻게 되는거지? 🤔\n<pre><code class=\"language-jsx\">const callback = useCallback(() => {\n  flushSync(() => {\n    setState((prev) => prev + 1); // 1\n  });\n  setState((prev) => prev + 2); // 2\n}, []);\n</code></pre>\n<ul>\n<li>이것도 2번 발생한다...!</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>이런 커다란 것 말고 개인적으로 소소하게 마음에 드는 변화\n<ul>\n<li><a href=\"https://github.com/facebook/react/blob/main/CHANGELOG.md#react-2\">Notable Changes - React</a></li>\n<li><code>Components can now render undefined</code></li>\n<li><code>No warning about setState on unmounted components</code></li>\n<li>특히 언마운트 시점의 상태 업데이트 경고 없애려고... <code>useMountedState</code> 같은걸 사용했었는데 희소식</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"710--716\" style=\"position:relative;\"><a href=\"#710--716\" aria-label=\"710  716 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>7/10 ~ 7/16</code></h2>\n<h4 id=\"\" style=\"position:relative;\"><a href=\"#\" aria-label=\" permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>😯</h4>\n<ul>\n<li>이번달은 직접 시도해보는 것보다 영상이나 블로그 보는게 더 많은 것 같다</li>\n</ul>\n<h4 id=\"왜-react는-성공했나\" style=\"position:relative;\"><a href=\"#%EC%99%9C-react%EB%8A%94-%EC%84%B1%EA%B3%B5%ED%96%88%EB%82%98\" aria-label=\"왜 react는 성공했나 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>왜 React는 성공했나</code></h4>\n<ul>\n<li>제목이 재미있어보여서 -<a href=\"https://techblog.woowahan.com/8311/\">왜 React는 성공했나</a></li>\n<li>FE 의 중요한 한가지 DOM 을 어떻게 제어하느냐</li>\n<li>다양한 브라우저의 스펙에 따라 직접 지원하는 api로 작업하기 &#x3C;&#x3C;&#x3C; 보다 빠른 DOM 제어를 도와주는 라이브러리</li>\n<li>이런 흐름으로 react가 좋은 대안이 되었다\n<ul>\n<li>본문에서 나오지만 jquery가 밀린 이유 = 속도</li>\n<li>DOM을 쉽게 제어할 수 있도록 라이브러리를 사용하는데</li>\n<li>react 대비 jquery의 속도가 너무나 느리기 때문에</li>\n</ul>\n</li>\n<li>\n<blockquote>\n<p>개발자는 React 문법에 맞춰 <code>상태(state)만 관리</code>하면, <code>상태를 기준으로 DOM API는 React에서 알아서 처리하여 DOM을 렌더링</code>합니다.</p>\n</blockquote>\n</li>\n<li>\n<blockquote>\n<p><code>클래스 컴포넌트</code> 같은 경우, <code>최초로 생성되는 컴포넌트만 새롭게 인스턴스</code>를 만들고, 컴포넌트가 삭제되기 전까지 만들어진 <code>인스턴스를 통해 render 메서드를 이용하여 상태 변경을 감지(setState)</code>합니다. 즉, 해당 인스턴스에서 필요한 부분만을 업데이트하여 <code>context 상태를 계속 유지</code>할 수 있습니다.</p>\n</blockquote>\n</li>\n<li>\n<blockquote>\n<p>하지만 <code>함수 컴포넌트(function component)</code>의 경우 <code>props를 인자로 받아서, JSX 문법에 맞는 React Component를 반환</code>해 주기 때문에 <code>함수 컴포넌트의 호출은 무조건 렌더링</code>을 일으킵니다. 이미 만들어진 인스턴스를 가지고 render만 호출하는 클래스 컴포넌트와는 다르게, <code>함수 컴포넌트는 상태가 변경될 때마다 새로운 인스턴스를 생성</code>하기 때문입니다. 따라서 함수 컴포넌트는 호출될 때마다 늘 동일한 상태, 초기화된 상태만 가질 수 있었습니다.</p>\n</blockquote>\n</li>\n<li>상태만 관리하면 된다</li>\n<li>클래스에서 함수 컴포넌트로 넘어오고 나서 memo만 잘 사용하면 문제 없고 오히려 코드가 hooks으로 통일되어 보인다는 장점만을 생각했다</li>\n<li>근데 최근(지난주 조합 찾기 처럼)에 함수 컴포넌트처럼 <code>React Component를 반환</code>하는 무언가 (=useCallback에서 반환하는) 들이 무자비한 리렌더 또는 불필요한 연산을 유발하고 있었던것을 깨닫게 되었다</li>\n</ul>\n<h2 id=\"73--79\" style=\"position:relative;\"><a href=\"#73--79\" aria-label=\"73  79 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>7/3 ~ 7/9</code></h2>\n<h4 id=\"조합-찾기\" style=\"position:relative;\"><a href=\"#%EC%A1%B0%ED%95%A9-%EC%B0%BE%EA%B8%B0\" aria-label=\"조합 찾기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>조합 찾기</code></h4>\n<ul>\n<li>메모이제이션 잘 되고 있는걸까</li>\n<li><a href=\"https://reactjs.org/docs/hooks-reference.html#usecallback\">useCallback = memoized version of the callback</a></li>\n<li><a href=\"https://reactjs.org/docs/hooks-reference.html#usememo\">useMemo = memoized value</a></li>\n</ul>\n<h4 id=\"아는거-딱-하나-있는데\" style=\"position:relative;\"><a href=\"#%EC%95%84%EB%8A%94%EA%B1%B0-%EB%94%B1-%ED%95%98%EB%82%98-%EC%9E%88%EB%8A%94%EB%8D%B0\" aria-label=\"아는거 딱 하나 있는데 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>아는거 딱 하나 있는데</code></h4>\n<ul>\n<li>악 아는게 없나보다!!!!!!!!!!</li>\n<li>아는게 없는걸 안다</li>\n<li>이거 하나 아는게 다행인가</li>\n</ul>\n<h2 id=\"71--72\" style=\"position:relative;\"><a href=\"#71--72\" aria-label=\"71  72 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>7/1 ~ 7/2</code></h2>\n<h4 id=\"flatlist\" style=\"position:relative;\"><a href=\"#flatlist\" aria-label=\"flatlist permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>FlatList</code></h4>\n<ul>\n<li><a href=\"https://shopify.github.io/flash-list/\">shopify: FlashList</a>로 FlatList를 개선할 수 있을까</li>\n<li>비슷한 것만 봐도 깜짝깜짝 놀래는 FlatList</li>\n<li>이걸???</li>\n</ul>","frontmatter":{"slug":"/blog/monthly-log/2022-07","date":"2022년 8월 11일","title":"7월 한달동안 로그","subtitle":"찾아보고, 읽어보고, 적어두기","tags":["log","react","memoization"]}}},"pageContext":{"id":"ed9880cd-a814-54ee-b0be-26202b54fd36","frontmatter__slug":"/blog/monthly-log/2022-07","__params":{"frontmatter__slug":"blog"}}},"staticQueryHashes":["3000541721","3293771174"],"slicesMap":{}}