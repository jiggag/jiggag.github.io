{
    "componentChunkName": "component---src-pages-markdown-remark-frontmatter-slug-tsx",
    "path": "/blog/monthly-log/2022-09/",
    "result": {"data":{"markdownRemark":{"html":"<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#926--930\"><code>9/26 ~ 9/30</code></a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#useevent\"><code>useEvent</code></a></li>\n<li><a href=\"#default-export\"><code>default export</code></a></li>\n<li><a href=\"#\"><code>{}</code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#919--925\"><code>9/19 ~ 9/25</code></a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#flex-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83\"><code>flex 레이아웃</code></a></li>\n<li><a href=\"#%EB%8D%B0%EB%93%9C%EB%9D%BC%EC%9D%B8-%EB%93%9C%EB%A6%AC%EB%B8%94-%EA%B8%80%EC%93%B0%EA%B8%B0\"><code>데드라인 드리블 글쓰기</code></a></li>\n<li><a href=\"#%EC%8A%A4%ED%84%B0%EB%94%94%EB%A5%BC-%EC%A7%84%ED%96%89%ED%95%98%EA%B3%A0-%EB%82%98%EB%A9%B4\"><code>스터디를 진행하고 나면</code></a></li>\n<li><a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%81%B4%EB%A6%B0-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EC%9D%98%EC%A1%B4%EC%84%B1-%EB%B6%84%EB%A6%AC\"><code>타입스크립트 프로젝트 클린 아키텍처 (의존성 분리)</code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#912--918\"><code>9/12 ~ 9/18</code></a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\"><code>프론트엔드 아키텍쳐</code></a></li>\n<li><a href=\"#%EC%84%A0%EC%96%B8%ED%98%95-%EB%AA%85%EB%A0%B9%ED%98%95-%EA%B4%80%EA%B3%84\"><code>선언형, 명령형 관계</code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#95--911\"><code>9/5 ~ 9/11</code></a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8-%EB%B2%A0%ED%83%80-%EB%AC%B8%EC%84%9C\"><code>리액트 베타 문서</code></a></li>\n<li><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%A6%AC%EB%A0%8C%EB%8D%94%EB%A7%81\"><code>리액트 컴포넌트 리렌더링</code></a></li>\n<li><a href=\"#rn-fabric\"><code>RN fabric</code></a></li>\n<li><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC\"><code>리액트 상태 관리</code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#91--94\"><code>9/1 ~ 9/4</code></a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94%EB%A5%BC-%EC%9C%84%ED%95%B4\"><code>리액트 성능 최적화를 위해</code></a></li>\n<li><a href=\"#%EA%B3%84%EC%86%8D-%EC%B6%94%EA%B0%80%EB%90%98%EB%8A%94-%EB%B9%84%EC%A6%88%EB%8B%88%EC%8A%A4%EC%97%90-%EB%8C%80%EC%9D%91%ED%95%98%EA%B8%B0\"><code>계속 추가되는 비즈니스에 대응하기</code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"926--930\" style=\"position:relative;\"><a href=\"#926--930\" aria-label=\"926  930 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>9/26 ~ 9/30</code></h2>\n<h4 id=\"useevent\" style=\"position:relative;\"><a href=\"#useevent\" aria-label=\"useevent permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>useEvent</code></h4>\n<ul>\n<li><a href=\"https://github.com/reactjs/rfcs/pull/220#issuecomment-1259938816\">RFC: useEvent</a> ❌</li>\n<li>useEffect나 useCallback에서 디펜던시로 추가하고 싶지는 않지만 사용해야하는 경우 ref로 조건 처리하고는 했는데</li>\n<li>이런 상태를 대체할 수 있을 것이라 보고 있었으나</li>\n<li>뒤돌아서 생각해보면 디펜던시 대혼란에 빠지게 될 것 같았다</li>\n<li>린트 룰을 꺼버리는게 차라리 나을지도 모르는? (이게 더 명시적이니깐)</li>\n<li>근데 useEvent가 대혼란을 극복하지 못하고 사라지는중</li>\n</ul>\n<h4 id=\"default-export\" style=\"position:relative;\"><a href=\"#default-export\" aria-label=\"default export permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>default export</code></h4>\n<ul>\n<li><a href=\"https://velog.io/@eunbinn/default-exports-in-javascript-modules-are-terrible\">[번역] 자바스크립트 모듈에서 default export는 끔찍합니다</a></li>\n<li><code>default export는 어떤 이름으로든 export 할 수 있으므로 여러 개발자는 default import를 위해 각각 다른 이름과 명명 스키마를 생각할 것입니다</code></li>\n<li>만약 다른 모듈에서 명명된 두 named export의 이름이 같은 경우 어떻게 해야하나요?\"라고 생각할 수 있습니다. 다행히 이 문제는 import aliasing으로 쉽게 해결할 수 있습니다.\n<ul>\n<li>그러나 import 할 때마다 이름을 고민하는 것 보다 하나의 파일 안의 스코프에서 일회성으로 이름을 고민하는 것이 훨씬 편합니다.</li>\n<li>default export로 매번 import 할때마다 고민하기보다 동일한 이름의 named export가 발생한 시점에 일회성으로 고민하는 것이 더 낫다</li>\n</ul>\n</li>\n<li>그럼에도 default export 를 써야겠다면?\n<ul>\n<li>index 파일을 만들어서 여기에 전부 default import 하고 이 index 에 접근하도록</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"\" style=\"position:relative;\"><a href=\"#\" aria-label=\" permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>{}</code></h4>\n<ul>\n<li><a href=\"https://ykss.netlify.app/translation/how-to-talk-about-software-changes\">(번역) 소프트웨어 변경에 대해 이야기하는 방법</a></li>\n<li><code>우리는 {새로운 가설} 때문에 {변경}이 {미흡한 점}을 개선할 것으로 기대합니다</code></li>\n<li>무섭게 다가오는 문장\n<ul>\n<li>리팩터링을 통해 더 나아졌기를</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"919--925\" style=\"position:relative;\"><a href=\"#919--925\" aria-label=\"919  925 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>9/19 ~ 9/25</code></h2>\n<h4 id=\"flex-레이아웃\" style=\"position:relative;\"><a href=\"#flex-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83\" aria-label=\"flex 레이아웃 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>flex 레이아웃</code></h4>\n<ul>\n<li>항상 잘 사용하지 못하는 flex</li>\n<li><a href=\"https://d2.naver.com/helloworld/8540176\">이 글</a> 여러번 읽었더니 드디어 이해가...\n<ul>\n<li>감성으로 이해하는데, 이제 이성으로도 살짝!</li>\n<li>두번 정도 더 겪으면 될 것 같다</li>\n</ul>\n</li>\n<li>하지마 알고 있고 이해하는 것과 다르게 제대로 사용하는 것\n<ul>\n<li>제대로 사용하는 것까지 이어져야 완전히 내것이 되는데</li>\n<li>가장 조심해야하는 것이 무의식적인 사용</li>\n</ul>\n</li>\n<li>지금도 잘 사용하고 있다고 생각하는 것이 있다면....\n<ul>\n<li>나혼자만의 착각</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"데드라인-드리블-글쓰기\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EB%93%9C%EB%9D%BC%EC%9D%B8-%EB%93%9C%EB%A6%AC%EB%B8%94-%EA%B8%80%EC%93%B0%EA%B8%B0\" aria-label=\"데드라인 드리블 글쓰기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>데드라인 드리블 글쓰기</code></h4>\n<ul>\n<li><a href=\"https://medium.com/@totuworld/%EB%8D%B0%EB%93%9C%EB%9D%BC%EC%9D%B8-%EB%93%9C%EB%A6%AC%EB%B8%90-%EA%B8%80%EC%93%B0%EA%B8%B0-%ED%83%88%EC%B6%9C%EB%B2%95-8d6c422e2a70\">데드라인 드리블 글쓰기</a></li>\n<li>한달에 하나 정도 더 쓰자는 마음이였는데 실행하지 못한지 반년 훌쩍</li>\n<li>나 또한 마찬가지로 <code>한달동안</code>을 마지노선으로 가져간다...</li>\n<li>글감을 바로 메모해두며 그것이 글이 되어야하는데, 내 글감은 그대로 한마디가 되고 끝나버린다</li>\n<li>짧은 생명주기</li>\n</ul>\n<h4 id=\"스터디를-진행하고-나면\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%84%B0%EB%94%94%EB%A5%BC-%EC%A7%84%ED%96%89%ED%95%98%EA%B3%A0-%EB%82%98%EB%A9%B4\" aria-label=\"스터디를 진행하고 나면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>스터디를 진행하고 나면</code></h4>\n<ul>\n<li>책을 한권 읽는다던지 그리고 후기를 적는다면</li>\n<li><a href=\"https://tosspayments-dev.oopy.io/share/books/unit-testing\">이런느낌으로</a> 정리해두는 것도 좋겠는데</li>\n<li>스터디를 참여하는 것 자체가 부담이라면</li>\n<li>이런 온라인에 올라와있는 후기와 함께 개인적으로 느낀 것을 정리하면서 읽어보는 것도 재밋겠다</li>\n<li>단위테스트 책을 읽어보고 싶었는데, 후기에 올라온 내용처럼 보통 백엔드 위주의 내용이라 어떻게 접목할 수 있을까 하는 고민이였다</li>\n</ul>\n<h4 id=\"타입스크립트-프로젝트-클린-아키텍처-의존성-분리\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%81%B4%EB%A6%B0-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EC%9D%98%EC%A1%B4%EC%84%B1-%EB%B6%84%EB%A6%AC\" aria-label=\"타입스크립트 프로젝트 클린 아키텍처 의존성 분리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>타입스크립트 프로젝트 클린 아키텍처 (의존성 분리)</code></h4>\n<ul>\n<li><a href=\"https://velog.io/@lky5697/the-ultimate-clean-architecture-template-for-typescript-projects\">(번역)타입스크립트 프로젝트를 위한 궁극적인 클린 아키텍처 템플릿</a></li>\n<li>예제는 core, data, di, presenter 구성인데, RN 플젝을 이렇게 구성한다면?\n<ul>\n<li>presenter에 일반적인 components, container</li>\n<li>core에서는 presenter에서 사용할 유즈케이스</li>\n<li>data에 core의 유즈케이스에서 사용할 데이터 구조</li>\n<li>di에서 data를 core의 유즈케이스에 따라 변환하여 실제 presenter에서 사용</li>\n</ul>\n</li>\n<li><a href=\"https://velog.io/@lky5697/the-ultimate-clean-architecture-template-for-typescript-projects#%ED%8C%A8%ED%82%A4%EC%A7%80-%EA%B0%84%EC%9D%98-%EC%A2%85%EC%86%8D%EC%84%B1-%EC%84%A4%EC%A0%95\">패키지 간의 종속성 설정</a>에서 이런 의존성을 확인할 수 있다\n<ul>\n<li>data는 core에 의존</li>\n<li>di는 data, core에 의존</li>\n<li>presenter는 di, core에 의존</li>\n</ul>\n</li>\n<li>이런 의존 관계로 인해 core가 변경되면 data, di, presetner 모두 다시 빌드 되어야한다\n<ul>\n<li>data가 달라지면 core에서 처리하는 과정이 변경되어야하고 이에 따라 di도 달라질 수 있다</li>\n<li>di가 변경되면 core에서 data를 변환하는 과정이 달라져야하고</li>\n<li>core가 변경되면 data를 변환한 di가 달라지고 presenter에서 보여지는 것이 달라질 수 있기 때문</li>\n</ul>\n</li>\n<li>확실하게 의존성 분리가 되겠는데, 갑자기 리덕스가 생각난다 🤔</li>\n</ul>\n<h2 id=\"912--918\" style=\"position:relative;\"><a href=\"#912--918\" aria-label=\"912  918 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>9/12 ~ 9/18</code></h2>\n<h4 id=\"프론트엔드-아키텍쳐\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90\" aria-label=\"프론트엔드 아키텍쳐 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>프론트엔드 아키텍쳐</code></h4>\n<ul>\n<li><a href=\"https://yozm.wishket.com/magazine/detail/1663/\">프론트엔드 아키텍쳐 트랜드?</a>\n<ul>\n<li>redux + saga가 원탑이라고 생각하던 지난 시간</li>\n<li>지금은 서버 API 캐싱을 잘 관리하는 것이 더 중요해졌다</li>\n<li>이렇게 계속 변화되는 아키텍쳐 속에서 하고자 하는 의미만 알아두면 좋겠다</li>\n</ul>\n</li>\n<li>비즈니스 로직을 완전히 분리하여 View를 구성할 수 있다면 좋겠지만\n<ul>\n<li>분리하지 못한다면 비즈니스 로직을 포함한 거대한 컴포넌트가 되어버리는데\n<ul>\n<li>로직도 있고 View도 있고</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>여기서 View만 이라도 한번 더 분리해서 UI 독립적일 수 있게 되면 좋겠지만\n<ul>\n<li>그럼 props drilling하게 되고 오히려 컴포넌트가 어디서든 재사용하는 것이 어려운</li>\n<li>UI 독립이기는 하지만 정말 독립적이지는 않은 이 로직에 대하여 의존적인 컴포넌트가 되었다</li>\n</ul>\n</li>\n<li>어차피 재사용 되지 못한다면 비즈니스 로직에 의존적이더라도 언제든 다른 것으로 교체가능하도록\n<ul>\n<li>재사용은 되지 않지만 교체는 수월한 최소한의 컴포넌트</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"선언형-명령형-관계\" style=\"position:relative;\"><a href=\"#%EC%84%A0%EC%96%B8%ED%98%95-%EB%AA%85%EB%A0%B9%ED%98%95-%EA%B4%80%EA%B3%84\" aria-label=\"선언형 명령형 관계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>선언형, 명령형 관계</code></h4>\n<ul>\n<li><a href=\"https://milooy.github.io/dev/220810-abstraction-and-declarative-programming/\">선언형, 명령형 코드 그리고 추상화</a>\n<ul>\n<li>명령형 => 어떻게(How)\n<pre><code class=\"language-ts\">const 등록완료된_리스트 = (list) => {\n\tconst result = [];\n\tfor (let i = 0; i &#x3C; list.length; i++) {\n\t\tif (list[i].isCompleted) {\n\t\t  result.push(list[i])\n\t\t}\n\t}\n\n\treturn result;\n};\n</code></pre>\n</li>\n<li>선언형 => 무엇을(What) => 명령형에서 어떻게(How)를 감추고 무엇을(What)만 노출 => 명령형을 추상화하였다\n<pre><code class=\"language-ts\">const 등록완료된_리스트 = (list) => {\n\treturn list.filter(item => item.isCompleted);\n};\n</code></pre>\n</li>\n<li>선언형 내부에 명령형이 추상화되어 숨겨져있다</li>\n</ul>\n</li>\n<li>그렇다면 명령형 선언형 구분할 필요 없이 명령형을 구조적으로 정리하여 내부에 숨겨두는 것이 무조건 선언형인가?\n<ul>\n<li><code>선언형은 사이드 이펙 없이 순수해야한다</code> 라는 내용에 따르면 <code>언제 어디서 + 어떤 상황에서 호출되어도 동일한 기댓값</code>을 주어야한다</li>\n<li>명령형 => 시간 순서를 지켜야하는 절차적으로 호출</li>\n<li>선언형 => 순수하기 때문에 시간 순서 상관없이 어디서든 호출</li>\n</ul>\n</li>\n<li>모든것을 선언형으로만 작성할 수 없을 것 같다\n<ul>\n<li>선언형 내부를 따라가다보면 결국 시간 순서에 따라 작성되어있는 명령형이 감춰져있을 것</li>\n<li>이것들을 추상화하여 잘 전달하고 사용하도록</li>\n</ul>\n</li>\n<li>그럼 이런 명령형 코드를 찾아보게 되는 시점이 언제 있을까?\n<ul>\n<li>추상화되어있는 RN 컴포넌트나 브릿지 사용하다가 무언가 오잉? 하는 시점에 따라가다보면</li>\n<li>어디엔가 나열되어있는 명령형 코드를 찾아볼 수 있다</li>\n</ul>\n</li>\n<li>이 글을 읽고 하나 더 와닿은\n<ul>\n<li><code>회사 프론트 동료들과 추상화와 선언적인 코드의 관계에 대해서 이런저런 이야기를 나눴습니다. 머릿속에 추상적으로 있던 개념이 좀 각이 잡혀서 ㅎㅎ 한 번 글로 적어보려 합니다.</code></li>\n<li>이야기 한 것 만으로 머릿속에서 정리하고 흘러갈 수 있는 것을 기록하면서 다시 한번 다듬어서 남겨두기</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"95--911\" style=\"position:relative;\"><a href=\"#95--911\" aria-label=\"95  911 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>9/5 ~ 9/11</code></h2>\n<h4 id=\"리액트-베타-문서\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8-%EB%B2%A0%ED%83%80-%EB%AC%B8%EC%84%9C\" aria-label=\"리액트 베타 문서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>리액트 베타 문서</code></h4>\n<ul>\n<li><a href=\"https://reactjs.org/blog/2022/06/15/react-labs-what-we-have-been-working-on-june-2022.html#offscreen\">기대되는 것: Offscreen</a></li>\n<li><a href=\"https://beta.reactjs.org/learn/synchronizing-with-effects#recap\">마음은 알겠지만...: When Strict Mode is on, React mounts components twice (in development only!) to stress-test your Effects.</a></li>\n<li><a href=\"https://beta.reactjs.org/learn/you-might-not-need-an-effect#caching-expensive-calculations\">초기 렌더에는 결국 모두 계산해야하니깐: useMemo won’t make the first render faster. It only helps you skip unnecessary work on updates.</a></li>\n</ul>\n<h4 id=\"리액트-컴포넌트-리렌더링\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%A6%AC%EB%A0%8C%EB%8D%94%EB%A7%81\" aria-label=\"리액트 컴포넌트 리렌더링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>리액트 컴포넌트 리렌더링</code></h4>\n<ul>\n<li>부모, props, state가 변경되었을때 리렌더가 일어날 것이라 생각한다</li>\n<li><a href=\"https://velog.io/@surim014/react-rerender#%EC%9D%B4%EA%B2%83%EC%9D%80-%EC%84%B1%EB%8A%A5%EC%97%90-%EC%96%B4%EB%96%A4-%EC%9D%98%EB%AF%B8%EA%B0%80-%EC%9E%88%EC%9D%84%EA%B9%8C%EC%9A%94\"><code>React에서 렌더링에 대해 이야기할 때, 우리는 대부분 render 함수의 실행에 대해서만 이야기합니다. 하지만 렌더링이 항상 UI 업데이트를 의미하지는 않습니다.</code></a>\n<ul>\n<li><code>리렌더가 일어날 것</code>이라 생각되는 부분은 <code>render 함수의 실행</code> 이였다</li>\n<li>실제로 diffing 연산에 의해 UI 업데이트는 발생하지 않았다</li>\n<li>확인해보면 컴포넌트 자체는 리렌더 되는 것처럼 보이지만 DOM은 업데이트 되지 않았다</li>\n<li>그러나 render 함수가 실행되었다는 사실은 변함없기 때문에\n<ul>\n<li>리액트는 diffing 연산을 계속 사용해야만했다</li>\n<li>DOM은 업데이트 되지 않더라도 함수형 컴포넌트 자체는 계속 재실행 되었다</li>\n<li><a href=\"https://medium.com/@yujso66/%EB%B2%88%EC%97%AD-%EC%99%9C-%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%97%90%EC%84%9C-%EB%A6%AC%EB%A0%8C%EB%8D%94%EB%A7%81%EC%9D%B4-%EB%B0%9C%EC%83%9D%ED%95%98%EB%8A%94%EA%B0%80-74dd239b0063\">참고: <code>클래스 컴포넌트와 다르게 함수형 컴포넌트는 아무 것도 변경되지 않는 경우에도 다시 함수를 호출하기 때문에렌 리렌더링된다</code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>여기서 리액트의 연산은 최적화 되어있다는 신뢰 기반으로 🤔</li>\n<li><code>DOM은 업데이트 되지 않더라도 함수형 컴포넌트 자체는 계속 재실행 되었다</code>는 부분을 최적화해야만한다\n<ul>\n<li><code>컴포넌트의 render 함수가 호출된다는 것 > 모든 하위 컴포넌트들이 리렌더링 (render 실행)</code></li>\n<li>의도치 않은 낭비</li>\n<li>메모이제이션 하는 것 외에 코드 재구성(상태를 처리하는 코드를 별도의 리렌더가 되어야하는 컴포넌트로 이동)을 통한 리렌더링 방지해야한다</li>\n</ul>\n</li>\n<li><a href=\"https://felixgerschau.com/react-performance-react-memo/\">참고: memo를 사용하지 말아야하는 이유</a>\n<ul>\n<li>메모리에 저장 + 얕은 비교</li>\n<li>그나마 얕은 비교의 위험? 연산 낭비?을 해결 하기 위해</li>\n<li>원시타입으로 사용하는 것을 추구하거나 정말 필요한 프로퍼티만 포함하도록 하였는데</li>\n<li>이미 리액트가 diffing 으로 최적화를 해두었는데, 그 최적화를 오히려 방해하는 연산이 들어가게 되는 것</li>\n<li><a href=\"https://medium.com/@yujso66/%EB%B2%88%EC%97%AD-%EC%99%9C-%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%97%90%EC%84%9C-%EB%A6%AC%EB%A0%8C%EB%8D%94%EB%A7%81%EC%9D%B4-%EB%B0%9C%EC%83%9D%ED%95%98%EB%8A%94%EA%B0%80-74dd239b0063\">참고: <code>컴포넌트에 많은 props가 있고 자손이 많지 않은 경우 컴포넌트를 다시 렌더링하는 것과 비교하여 props가 변경되었는지 확인하는 것이 실제로 더 느릴 수 있습니다.</code></a></li>\n<li>그럼 불필요한 메모리 저장을 제거하고 최소한의 연산을 위해 복잡한 컴포넌트에서의 memo를 제거해볼까</li>\n</ul>\n</li>\n<li>결론\n<ul>\n<li>render 함수의 실행 자체를 방지하려면 상태가 변경되는 지점을 해당 컴포넌트 내부에 위치해야한다</li>\n<li>순수 컴포넌트로 만들어서 자식 컴포넌트가 불필요하게 리렌더 되는 것을 방지한다</li>\n<li>컨텍스트는 보이지 않는 props 또는 내부 props로 위험 인자다...</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"rn-fabric\" style=\"position:relative;\"><a href=\"#rn-fabric\" aria-label=\"rn fabric permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>RN fabric</code></h4>\n<ul>\n<li>아직도 안드로이드 fabric 버전에서 ReactNavigation 라이브러리가 동작하지 않는다</li>\n<li>이것저것 확인해보니 디펜던시 라이브러리가 문제가 되고 있는 듯 (react-native-screens, react-native-safe-area-context 무언가)</li>\n<li><a href=\"https://github.com/th3rdwave/react-native-safe-area-context/issues/303#issuecomment-1220940321\">ndk 오류 관련 깃헙 이슈 코멘트</a>\n<ul>\n<li>최근에 RN 0.70.0 에서도 cmake로 변경되었던데....?</li>\n<li>혹시나 해보면 RN 버전부터 다시 올려본다 => 그러나 safe-area-context가 아직 대응이 되지 않았기에 여전했다...</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/th3rdwave/react-native-safe-area-context/issues/303\">같은 이슈가 올라와있는데 아직....</a>\n<ul>\n<li><a href=\"https://github.com/th3rdwave/react-native-safe-area-context/issues/304\">같은 이슈</a></li>\n<li><a href=\"https://github.com/th3rdwave/react-native-safe-area-context/issues/267\">분명 전에도 링크 걸어둔 이슈</a></li>\n</ul>\n</li>\n<li>근데 전부터 FabricExample 살펴보면 항상 의문인 것은 <code>newArchEnabled=false</code>?\n<ul>\n<li>fabric 버전으로 올린 이유가 이거 때문 아닌가..?</li>\n</ul>\n</li>\n<li>☠️ 대체 왜...</li>\n</ul>\n<h4 id=\"리액트-상태-관리\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC\" aria-label=\"리액트 상태 관리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>리액트 상태 관리</code></h4>\n<ul>\n<li><a href=\"https://medium.com/@yujso66/%EB%B2%88%EC%97%AD-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC%EC%9D%98-%EC%83%88%EB%A1%9C%EC%9A%B4-%ED%9D%90%EB%A6%84-6e5ed0022e39\">[번역] 리액트 상태 관리의 새로운 흐름</a></li>\n<li>리액트에서는 전역으로 상태를 관리하는 방법에 대한 가이드라인이 없다\n<ul>\n<li>단순히 전역으로 전달하는 것은 Context로 할 수 있지만</li>\n<li>여기서 말하는 상태 관리와는 목적이 다르다</li>\n<li><a href=\"https://jbee.io/react/thinking-about-global-state/#context-api%EB%8A%94-%EC%84%B1%EB%8A%A5%EC%97%90\">참고: 전역상태 관리에 대한 단상 - Context API 성능</a></li>\n<li>전역 상태 관리에 대한 최적화 처리가 되어있는 Redux와 달리 Context는 전달하는 목적만 있었기에 최적화 작업이 포함되어있지 않다</li>\n<li>그렇다면 Context를 활용해 전역에서 접근한다면 어떻게 될까?</li>\n<li>사용하는 곳에서 단순한 Context 변경사항에도 리렌더를 유발하게 된다\n<ul>\n<li>\n<pre><code>  Provider 하위에서 context를 구독하는 모든 컴포넌트는 Provider의 value prop가 바뀔 때마다 다시 렌더링 됩니다\n  .\n  상위 컴포넌트에서 React.memo 또는 shouldComponentUpdate를 사용하더라도 useContext를 사용하고 있는 컴포넌트 자체에서부터 다시 렌더링됩니다.\n  .\n  useContext를 호출한 컴포넌트는 context 값이 변경되면 항상 리렌더링 될 것입니다.\n</code></pre>\n</li>\n<li><a href=\"https://ko.reactjs.org/docs/hooks-reference.html#usecontext\">문서: useContext</a></li>\n<li><a href=\"https://github.com/facebook/react/issues/15156#issuecomment-474590693\">컨텍스트 잘 사용하기: 메모이제이션 최적화</a>\n<ul>\n<li>컨텍스트 분리 또는 하위 컴포넌트 memo 또는 useMemo로 jsx 반환</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>하위 컴포넌트에서 최적화를 진행하더라도 결국 불필요한 리소스가 소요된다</li>\n</ul>\n</li>\n<li>각각의 라이브러리들은 서로 다른 문제에 대해 서로 다른 해결방법을 제시했는데\n<ul>\n<li>요구사항에 맞는 적절한 라이브러리를 선택할 수 있어야한다</li>\n</ul>\n</li>\n<li>전역 상태 관리 라이브러리가 해결하고자 하는 문제\n<ul>\n<li>저장된 상태를 컴포넌트 트리 어디에서든지 읽어 올 수 있는 기능\n<ul>\n<li>props drilling을 피하고 어디서든 이 상태를 가져와서 사용하고자</li>\n<li>이때 상태 변경에 따른 리렌더링 최적화 필요</li>\n</ul>\n</li>\n<li>저장된 상태를 수정하는 기능\n<ul>\n<li>불편성을 유지하면서 상태 업데이트 할 수 있도록</li>\n</ul>\n</li>\n<li>렌더링을 최적화하는 메커니즘을 제공\n<ul>\n<li>실제 상태 변경에 따라 리렌더 되어야하는 컴포넌트에서 셀렉터를 구독하도록</li>\n<li>사용하지 않는 곳에서는 이 상태를 구독할 필요가 없다 (불필요한 리렌더를 유발할뿐)</li>\n</ul>\n</li>\n<li>메모리 사용을 최적화하는 메커니즘을 제공</li>\n</ul>\n</li>\n<li>이러한 문제를 해결하고자 Redux가 초기 도입되었다\n<ul>\n<li>그러나 전역상태 + 로컬 UI 상태 + 원격 API 상태 ....\n<ul>\n<li>\n<pre><code>  예를 들어 로컬 UI 상태의 경우 데이터와 해당 데이터를 업데이트하는 메서드 모두 드릴링하는 것은 상황이 커질수록 상대적으로 빠르게 문제가 되는 경우가 많습니다. 이 문제는 상태 끌어 올리기와 함께 컴포넌트 컴포지션 패턴을 사용하면 꽤 깔끔하게 해결할 수 있습니다.\n</code></pre>\n</li>\n<li>현재 마주하고 있는 문제이다</li>\n<li>이를 끌어올리거나 컴포지션으로 정리해야하는데...</li>\n</ul>\n</li>\n<li>수 많은 상태들이 분리되기 시작하였다\n<ul>\n<li>여기서 또 다른 문제는 모든 상태가 전역에 들어가버릴 수 있다 (정말 불필요했다...)</li>\n</ul>\n</li>\n<li>\n<pre><code>  실제로 많은 웹 애플리케이션은 주로 프런트엔드를 원격 상태 데이터와 동기화해야 하는 CRUD(생성, 읽기, 업데이트 및 삭제) 스타일의 애플리케이션입니다.\n\n  즉, 시간을 할애할 가치가 있는 주요 문제는 원격 서버 캐시 문제들입니다. 이러한 문제에는 서버 상태를 가져오고 캐시하고 동기화하는 방법이 포함됩니다.\n</code></pre>\n</li>\n<li>이러한 이유 (=원격 API 상태를 관리하기 위해서)로 리액트 쿼리를 사용하게 되었는데</li>\n</ul>\n</li>\n<li>아직 리덕스, 컨텍스트에서 완전히 빠져나오지 못했으며</li>\n<li>잘못된 구독으로 불필요한 리렌더를 유발하는 것을 정리하지 못했다</li>\n<li>여기서 다시 보니 반가운 <a href=\"https://blog.isquaredsoftware.com/2021/01/context-redux-differences/\">Context는 상태 관리가 아니다</a></li>\n</ul>\n<h2 id=\"91--94\" style=\"position:relative;\"><a href=\"#91--94\" aria-label=\"91  94 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>9/1 ~ 9/4</code></h2>\n<h4 id=\"리액트-성능-최적화를-위해\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94%EB%A5%BC-%EC%9C%84%ED%95%B4\" aria-label=\"리액트 성능 최적화를 위해 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>리액트 성능 최적화를 위해</code></h4>\n<ul>\n<li><a href=\"https://ykss.netlify.app/translation/500ms-to-1.7ms-in-react:-a-journey-and-a-checklist\">(번역) 리액트 성능 최적화, 500ms 에서 1.7ms 까지 : 그 여정과 체크리스트</a>\n<ul>\n<li>리액트 메모를 사용해야하는 시점 === 퍼포먼스가 잘 나오지 않다고 느껴지는 경우</li>\n<li>습관적으로 메모를 사용하고 있으나 실제로 최적화가 필요한 포인트를 찾아야함</li>\n<li>단순히 성능을 개선했다는 것이 아니라 원인이 되는 것을 제거하도록</li>\n<li><code>과도한 메모이제이션</code>🙈</li>\n</ul>\n</li>\n<li>큰 컴포넌트를 잘 정의된 작은 컴포넌트로 분해하고 컴포넌트가 원시 타입의 프로퍼티만을 사용하도록 한다면 리렌더링 최적화를 이끌 수 있다\n<ul>\n<li>memo로 개선할 수 있지만</li>\n<li><code>원시 타입의 프로퍼티</code>만을 위해서 현재 컴포넌트에 드릴링 되는 무거운 프로퍼티들을 제거하거나</li>\n<li>diffing 조건을 잘 이렇게 저렇게 하는 작업이...</li>\n</ul>\n</li>\n<li><a href=\"https://ykss.netlify.app/translation/500ms-to-1.7ms-in-react:-a-journey-and-a-checklist/#%EB%8B%A8%EA%B3%84-3---jsx%EC%9D%98-const-%EB%B3%80%EC%88%98%EB%A5%BC-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A1%9C-%EB%B3%80%ED%99%98\">최근 신경 쓰는 부분: jsx를 const로 변환</a>\n<ul>\n<li><code>renderCallback (useCallback&#x3C;JSX.Element>)</code>이 아닌 <code>RenderComponent (useMemo&#x3C;JSX.Element>)</code> 또는 <code>RenderComponent (memo)</code></li>\n<li><code>함수 호출은 항상 발생하고 jsx를 다시 빌드하기 때문에, jsx의 const 변수를 컴포넌트로 변환하는 것이 더 성능이 좋은 것으로 간주할 수 있습니다.</code></li>\n</ul>\n</li>\n<li>컴포넌트가 리렌더링 되는 이유를 파악하여 그 원인을 해결해야하는데\n<ul>\n<li>간단하게 memo가 효과가 있을 수 있으나</li>\n<li>결국 원시 타입이 아닌 객체가 재생성되어 리렌더를 유발 시키기 때문에</li>\n<li>이런 컴포넌트 트리를 찾아내야한다 🤡</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"계속-추가되는-비즈니스에-대응하기\" style=\"position:relative;\"><a href=\"#%EA%B3%84%EC%86%8D-%EC%B6%94%EA%B0%80%EB%90%98%EB%8A%94-%EB%B9%84%EC%A6%88%EB%8B%88%EC%8A%A4%EC%97%90-%EB%8C%80%EC%9D%91%ED%95%98%EA%B8%B0\" aria-label=\"계속 추가되는 비즈니스에 대응하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>계속 추가되는 비즈니스에 대응하기</code></h4>\n<ul>\n<li>[더 나은 쿠폰 서비스에 대한 아이디어 기록)(<a href=\"https://johngrib.github.io/wiki/article/coupon-service-and-code-data/\">https://johngrib.github.io/wiki/article/coupon-service-and-code-data/</a>)</li>\n<li>쿠폰 서비스를 위한 ifelse 지옥...</li>\n<li>쿠폰 뿐만 아닌 그 어떤 곳에서도 마주할 수 있는 상황에서</li>\n<li>이를 조합으로 해결할 수 있을까하여 참고하고자</li>\n</ul>","frontmatter":{"slug":"/blog/monthly-log/2022-09","date":"2022년 9월 25일","title":"9월 한달동안 로그"}}},"pageContext":{"id":"3113e98e-42a7-5774-9c07-fbe285d7fff2","frontmatter__slug":"/blog/monthly-log/2022-09","__params":{"frontmatter__slug":"blog"}}},
    "staticQueryHashes": ["3000541721","3293771174"]}