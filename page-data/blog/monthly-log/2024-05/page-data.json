{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/blog/monthly-log/2024-05/","result":{"data":{"markdownRemark":{"html":"<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#5%EC%9B%94%EC%9D%B8%EB%8D%B0\">5월인데</a></li>\n<li><a href=\"#%EB%8F%99%ED%98%95-%EB%A7%A4%ED%95%91-%ED%83%80%EC%9E%85homomorphic-mapped-type%EC%9D%B4-%EB%8F%84%EB%8C%80%EC%B2%B4-%EB%AD%94%EA%B0%80%EC%9A%94\">동형 매핑 타입(homomorphic mapped type)이 도대체 뭔가요?</a></li>\n<li><a href=\"#%EB%B2%88%EC%97%AD-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%97%90%EC%84%9C-as-const-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\">(번역) 타입스크립트에서 'As Const' 이해하기</a></li>\n</ul>\n</div>\n<h3 id=\"5월인데\" style=\"position:relative;\"><a href=\"#5%EC%9B%94%EC%9D%B8%EB%8D%B0\" aria-label=\"5월인데 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5월인데</h3>\n<ul>\n<li>5월은 어린이날</li>\n<li>나는 어른이날</li>\n</ul>\n<h3 id=\"동형-매핑-타입homomorphic-mapped-type이-도대체-뭔가요\" style=\"position:relative;\"><a href=\"#%EB%8F%99%ED%98%95-%EB%A7%A4%ED%95%91-%ED%83%80%EC%9E%85homomorphic-mapped-type%EC%9D%B4-%EB%8F%84%EB%8C%80%EC%B2%B4-%EB%AD%94%EA%B0%80%EC%9A%94\" aria-label=\"동형 매핑 타입homomorphic mapped type이 도대체 뭔가요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://junghan92.medium.com/%EB%8F%99%ED%98%95-%EB%A7%A4%ED%95%91-%ED%83%80%EC%9E%85-homomorphic-mapped-type-%EC%9D%B4-%EB%8F%84%EB%8C%80%EC%B2%B4-%EB%AD%94%EA%B0%80%EC%9A%94-36167ae94ede\">동형 매핑 타입(homomorphic mapped type)이 도대체 뭔가요?</a></h3>\n<ul>\n<li><code>type Partial&#x3C;T> = { [P in keyof T]?: T[P] };</code>\n<ul>\n<li><code>이러한 종류의 변환은 동형이며, 이는 매핑이 T의 프로퍼티에만 적용되고 다른 프로퍼티에는 적용되지 않음을 의미합니다.</code></li>\n<li>여기서 프로퍼티는 <code>keyof T</code> 로 정해져있다</li>\n</ul>\n</li>\n<li>하지만 <code>Record</code> 는 동형이 아니라고 한다\n<ul>\n<li><code>Record가 동형이 아니라는 한 가지 단서는 프로퍼티를 복사할 입력 타입을 받지 않는다는 것입니다. 동형이 아닌 타입은 본질적으로 새로운 속성을 생성하는 것입니다.</code></li>\n<li>Record 타입의 경우 미리 정의되지 않았기 때문에 프로퍼티가 새로 추가되는 형태로 쓰인다</li>\n</ul>\n</li>\n<li>내용이 읽다보니 어려워서\n<ul>\n<li>가장 중요한 내용은 마지막에 <code>매핑된 유형을 만들 때는 동형을 목표로 하세요.</code> 아닐까</li>\n<li>항상 새로 추가되는 프로퍼티를 가질 수 있는 Record 라면 어디에 매핑되었다고 할 수 있을까 하고 질문을 던지면 간단하게 생각해볼 수 있겠다</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"번역-타입스크립트에서-as-const-이해하기\" style=\"position:relative;\"><a href=\"#%EB%B2%88%EC%97%AD-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%97%90%EC%84%9C-as-const-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-label=\"번역 타입스크립트에서 as const 이해하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://soobing.github.io/typescript/typescript-as-const/\">(번역) 타입스크립트에서 'As Const' 이해하기</a></h3>\n<ul>\n<li>단순하게 추론된 타입이 아니라 좀 더 정의된 형태의 타입으로 축소 시킨다는 느낌이다</li>\n<li><code>const object = { ... } as const</code> 하면 읽기 전용이 된다</li>\n<li>튜플처럼 미리 정의된 타입으로만 추론되기를 기대하는 경우\n<ul>\n<li>as const 를 사용하게 된다</li>\n<li><code>const [state, setState] = useState()</code> 의 타입이 <code>(boolean | (() => void))[]</code> 형태로 추론되지 않고 <code>[boolean, () => void]</code> 의 튜플로 추론된다</li>\n</ul>\n</li>\n<li><code>변수를 const 변수로 선언하는 것과 변수 끝에 “as const”를 추가하는 것은 다릅니다.</code>\n<ul>\n<li><code>as const</code> 자체가 ts 기능이기 때문인데</li>\n<li>js 입장에서는 <code>const num = 1</code> 로 상수를 변수 선언하게 되면 어차피 읽기 전용으로 쓰이는 것은 <code>as const</code> 와 동일하다</li>\n<li>하지만 타입을 추론해야하는 입장에서는 상수로 선언된 변수 num 이 아니라 <code>1</code> 이라는 타입을 추론하고자 하기 때문에 <code>as const</code> 를 사용해야만한다</li>\n<li>원시값이 아닌 배열이나 객체의 경우에도 <code>as const</code> 를 사용해 프로퍼티의 변경이나 배열의 프로토타입 함수를 사용하지 않는 읽기 전용 상수라는 것을 알릴 수 있다</li>\n</ul>\n</li>\n</ul>","frontmatter":{"slug":"/blog/monthly-log/2024-05","date":"2024년 6월 4일","title":"5월 한달동안 로그","subtitle":"찾아보고, 읽어보고, 적어두기","tags":["log"]}}},"pageContext":{"id":"b6fc8ccf-3afc-55e4-b586-5ba3b4ab9820","frontmatter__slug":"/blog/monthly-log/2024-05","__params":{"frontmatter__slug":"blog"}}},"staticQueryHashes":["3000541721","3293771174"]}