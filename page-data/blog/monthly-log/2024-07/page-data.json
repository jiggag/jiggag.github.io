{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/blog/monthly-log/2024-07/","result":{"data":{"markdownRemark":{"html":"<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EA%B7%BC%EC%9E%90%EA%B0%90\">근자감</a></li>\n<li><a href=\"#%EB%B2%88%EC%97%AD-%EB%8B%B9%EC%8B%A0%EC%9D%98-dom%EC%9D%80-%EC%96%BC%EB%A7%88%EB%82%98-%EA%B9%8A%EC%9D%80%EA%B0%80%EC%9A%94\">[번역] 당신의 DOM은 얼마나 깊은가요</a></li>\n<li><a href=\"#%EB%B2%88%EC%97%AD-%EB%A6%AC%EC%95%A1%ED%8A%B8-api%EC%99%80-%EC%BD%94%EB%93%9C-%EC%9E%AC%EC%82%AC%EC%9A%A9%EC%9D%98-%EC%A7%84%ED%99%94\">(번역) 리액트 API와 코드 재사용의 진화</a></li>\n<li><a href=\"#%EB%B2%88%EC%97%AD-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC%EC%99%80-%EB%A6%AC%EC%95%A1%ED%8A%B8-19---%EC%9D%B4%EC%A0%9C-%EB%A9%94%EB%AA%A8%EC%9D%B4%EC%A0%9C%EC%9D%B4%EC%85%98%EC%9D%84-%EC%8B%A0%EA%B2%BD%EC%93%B0%EC%A7%80-%EC%95%8A%EC%95%84%EB%8F%84-%EB%90%98%EB%82%98%EC%9A%94\">[번역] 리액트 컴파일러와 리액트 19 - 이제 메모이제이션을 신경쓰지 않아도 되나요?</a></li>\n<li><a href=\"#%EC%98%A4%EB%8A%98-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4-%EB%B4%A4%EB%8A%94%EB%8D%B0-%EC%96%B4%EB%95%A0%EC%9D%84-%EA%B2%83-%EA%B0%99%EB%82%98%EC%9A%94-\">오늘 리액트 컴파일러를 사용해 봤는데, 어땠을 것 같나요? 😉</a></li>\n<li><a href=\"#children-%EC%9D%84-%EC%9E%98%EB%AA%BB-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B3%A0-%EC%9E%88%EC%97%88%EB%8B%A4\">children 을 잘못 사용하고 있었다</a></li>\n</ul>\n</div>\n<h3 id=\"근자감\" style=\"position:relative;\"><a href=\"#%EA%B7%BC%EC%9E%90%EA%B0%90\" aria-label=\"근자감 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://www.linkedin.com/posts/%ED%98%84%EC%A7%81-%EC%84%9C-50206273_%EC%96%BC%EB%A7%88-%EC%A0%84-%ED%95%84%EC%A6%88%EC%83%81-%EC%88%98%EC%83%81%EC%9C%BC%EB%A1%9C-%ED%99%94%EC%A0%9C%EA%B0%80-%EB%90%9C-%ED%97%88%EC%A4%80%EC%9D%B4-%EA%B5%90%EC%88%98%EB%8B%98%EC%9D%B4-%EC%9C%A0%ED%80%B4%EC%A6%88%EC%97%90-%EB%82%98%EC%99%80%EC%84%9C-%EA%B7%BC%EA%B1%B0-activity-7212009259922808833-1YGC\">근자감</a></h3>\n<ul>\n<li><code>실력에서 자신감의 근거를 찾으면 언젠가 실력이 더 뛰어난 사람들을 만났을 때 자신감을 잃게 된다는 것입니다. 근거 없는 자신감으로 ‘나도 해 볼 수 있다’고 생각하는 마음이 중요하다는 말에 공감이 갔습니다.</code></li>\n<li>근거 없는 자신감이 주는 장점\n<ul>\n<li>근거 없이 자신있게 행동할 수 있다</li>\n<li>위축될 것이 없기 때문에 온전히 자신이 갖고 있는 것을 풀어낼 수 있다</li>\n</ul>\n</li>\n<li>꼭 근거가 있어야만 한다면\n<ul>\n<li>환경에 휩쓸리지 않고 내가 직접 컨트롤 할 수 있는 그러한 것에서 자신감을 얻자</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"번역-당신의-dom은-얼마나-깊은가요\" style=\"position:relative;\"><a href=\"#%EB%B2%88%EC%97%AD-%EB%8B%B9%EC%8B%A0%EC%9D%98-dom%EC%9D%80-%EC%96%BC%EB%A7%88%EB%82%98-%EA%B9%8A%EC%9D%80%EA%B0%80%EC%9A%94\" aria-label=\"번역 당신의 dom은 얼마나 깊은가요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://velog.io/@eunbinn/how-deep-is-your-dom\">[번역] 당신의 DOM은 얼마나 깊은가요</a></h3>\n<ul>\n<li>DOM 이 깊어질수록 트리 탐색 시간도 길어지고</li>\n<li>부모부터 시작한 레이아웃이 자식에게까지 전달되어야하기에 병목이 되기 쉽다</li>\n<li>끌어올려서 같은 위계에 둔다면 탐색 시간은 덤이고</li>\n<li>레이아웃, 페인트 시간이 줄어드는 것이 가장 큰 장점</li>\n</ul>\n<h3 id=\"번역-리액트-api와-코드-재사용의-진화\" style=\"position:relative;\"><a href=\"#%EB%B2%88%EC%97%AD-%EB%A6%AC%EC%95%A1%ED%8A%B8-api%EC%99%80-%EC%BD%94%EB%93%9C-%EC%9E%AC%EC%82%AC%EC%9A%A9%EC%9D%98-%EC%A7%84%ED%99%94\" aria-label=\"번역 리액트 api와 코드 재사용의 진화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://velog.io/@sehyunny/evolution-of-react-apis-and-code-reuses\">(번역) 리액트 API와 코드 재사용의 진화</a></h3>\n<ul>\n<li>\n<p><code>무엇이 어떻게 작동하는지, 또는 어떻게 작동해야만 하는지, 그리고 실제 작동하는 방식 간의 차이에서 버그와 성능 이슈가 발생합니다. 이를 극복할 수 있는 핵심은 기술에 대한 명확하고 정확한 멘탈 모델을 탑재하는 것입니다.</code></p>\n</li>\n<li>\n<p>react forget</p>\n<ul>\n<li><code>이는 모든 것을 명시적으로 남겨두는 것과 내부적으로 처리하려는 시도 간의 트레이드오프를 강조합니다.</code></li>\n<li>개발자가 직접 의존성 조절해가며 리렌더 조절하고 메모이제이션 작업하는 것을 리액트가 해주겠다는 빅피쳐</li>\n<li>하지만 모든 자동화가 갖고 있는 고민거리</li>\n<li>직접 할 것인가 자동화 시킬 것인가</li>\n<li>직접 확인하면서 커스텀 할 수 있는 것을 자동으로 처리되었기 때문에 오히려 그것을 피하기 위한 트릭이 추가될 가능성은 없을까?</li>\n</ul>\n</li>\n<li>\n<p><code>정확한 멘탈 모델을 갖게 되면 효율적으로 개발하고 버그와 성능 병목 현상을 빠르게 찾아낼 수 있습니다.</code></p>\n</li>\n<li>\n<p><code>멘탈 모델을 구축하는 좋은 방법은 특정 접근 방식이나 패턴을 독단적으로 고수하지 않고, 주어진 작업에 적합한 접근 방식을 선택하는 데 필요한 각 방법의 트레이드오프와 이점을 파악하는 것입니다.</code></p>\n</li>\n</ul>\n<h3 id=\"번역-리액트-컴파일러와-리액트-19---이제-메모이제이션을-신경쓰지-않아도-되나요\" style=\"position:relative;\"><a href=\"#%EB%B2%88%EC%97%AD-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC%EC%99%80-%EB%A6%AC%EC%95%A1%ED%8A%B8-19---%EC%9D%B4%EC%A0%9C-%EB%A9%94%EB%AA%A8%EC%9D%B4%EC%A0%9C%EC%9D%B4%EC%85%98%EC%9D%84-%EC%8B%A0%EA%B2%BD%EC%93%B0%EC%A7%80-%EC%95%8A%EC%95%84%EB%8F%84-%EB%90%98%EB%82%98%EC%9A%94\" aria-label=\"번역 리액트 컴파일러와 리액트 19   이제 메모이제이션을 신경쓰지 않아도 되나요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://velog.io/@eunbinn/react-compiler-soon\">[번역] 리액트 컴파일러와 리액트 19 - 이제 메모이제이션을 신경쓰지 않아도 되나요?</a></h3>\n<ul>\n<li>이후의 리액트에서 가장 기대 받고 있는 것 중 하나인 <code>react forget</code>\n<ul>\n<li>알아서 메모이제이션 해준다는데?!</li>\n<li>나의 할일이 하나 더 자동화 되는걸까?</li>\n</ul>\n</li>\n<li>우선 리액트 19는 컴파일러가 아니다\n<ul>\n<li><code>리액트 팀은 코드를 변경하지 않고도 새로운 컴파일러를 적용할 수 있음을 약속</code></li>\n<li>마이그레이션은 간단하게 해결되려나 싶지만</li>\n<li>클래스 컴포넌트를 함수형 컴포넌트로 바꾸는 정도는 아닐 것이다</li>\n</ul>\n</li>\n<li>개인적으로 걱정하는 것은 메모이제이션 하고 있지만\n<ul>\n<li>의도적으로 디펜던시를 수정하는 경우가 있다</li>\n<li>이런 경우는 직접 useCallback 같은 것을 사용하여 재구성하면 컴파일러가 인정해주는 것일까?</li>\n</ul>\n</li>\n<li><a href=\"https://velog.io/@eunbinn/react-compiler-soon#%EB%8D%94-%EC%9D%B4%EC%83%81-%EC%84%B1%EB%8A%A5%EC%9D%84-%EC%9C%84%ED%95%9C-%ED%95%A9%EC%84%B1%EC%9D%80-%ED%95%84%EC%9A%94-%EC%97%86%EC%8A%B5%EB%8B%88%EB%8B%A4\">이러한 합성 구조</a>가 리액트를 잘 이해했기 때문에 나올 수 있었다고 생각하는데\n<ul>\n<li>컴파일러는 자동으로 해준다면 그냥 하나의 파일에 수많은 상태가 변경됨에 따라 리렌더라고 불렀었던 무언가가 진행되도록 방치하면 된다</li>\n</ul>\n</li>\n<li><a href=\"https://velog.io/@eunbinn/react-compiler-soon#%EB%B9%84%EA%B5%90diffing%EC%99%80-%EC%9E%AC%EC%A1%B0%EC%A0%95reconciliation\">비교와 재조정</a> 방식 자체가 변경되어야만한다\n<ul>\n<li>컴파일러만 믿고 아무런 메모이제이션이 들어가지 않을 것이기 때문에…</li>\n</ul>\n</li>\n<li><a href=\"https://www.developerway.com/tags/re-renders\">강의: 글</a></li>\n<li><a href=\"https://www.youtube.com/playlist?list=PL6dw1BPCcLC4n-4o-t1kQZH0NJeZtpmGp\">강의: 유튜브</a></li>\n</ul>\n<h3 id=\"오늘-리액트-컴파일러를-사용해-봤는데-어땠을-것-같나요-\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%8A%98-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4-%EB%B4%A4%EB%8A%94%EB%8D%B0-%EC%96%B4%EB%95%A0%EC%9D%84-%EA%B2%83-%EA%B0%99%EB%82%98%EC%9A%94-\" aria-label=\"오늘 리액트 컴파일러를 사용해 봤는데 어땠을 것 같나요  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://junghan92.medium.com/%EC%98%A4%EB%8A%98-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4-%EB%B4%A4%EB%8A%94%EB%8D%B0-%EC%96%B4%EB%95%A0%EC%9D%84-%EA%B2%83-%EA%B0%99%EB%82%98%EC%9A%94-ece57f076b02\">오늘 리액트 컴파일러를 사용해 봤는데, 어땠을 것 같나요? 😉</a></h3>\n<ul>\n<li>위의 내용과 이어지는 리액트 컴파일러 이야기</li>\n<li>오픈소스가 공개 되었고 컴파일러를 사용한 후기</li>\n<li><code>리액트의 리렌더링은 계단식입니다. 리액트 컴포넌트에서 상태를 변경할 때마다 컴포넌트 트리의 끝에 도달할 때까지 해당 컴포넌트, 그 안의 모든 컴포넌트 그리고 그 안의 컴포넌트의 리렌더링이 발생합니다. </code></li>\n<li><code>“그냥 작동”하나요? 기술적으로는 그렇습니다. 전원을 켜기만 하면 아무 문제도 없는 것 같습니다. 하지만 리액트 개발자 도구에서 메모이제이션 것으로 표시되기는 하지만 모든 것을 올바르게 메모이제이션 하지는 않습니다.</code></li>\n<li><code>오히려 지금보다 더 잘 알고 있어야 하며 컴파일러에 최적화된 컴포넌트를 작성하기 위한 육감적인 감각을 키워야 합니다.</code></li>\n<li>필요한 곳에서는 직접 메모이제이션 해야한다가 아직까지의 결론이다</li>\n</ul>\n<h3 id=\"children-을-잘못-사용하고-있었다\" style=\"position:relative;\"><a href=\"#children-%EC%9D%84-%EC%9E%98%EB%AA%BB-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B3%A0-%EC%9E%88%EC%97%88%EB%8B%A4\" aria-label=\"children 을 잘못 사용하고 있었다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>children 을 잘못 사용하고 있었다</h3>\n<ul>\n<li><a href=\"https://www.developerway.com/posts/react-elements-children-parents\">The mystery of React Element, children, parents and re-renders</a></li>\n<li>children에 Element[] 처럼 배열로 들어가는 경우에만 메모이제이션해서 다시 넘겨주고 있었는데</li>\n<li>Element 하나만 들어가는 경우에도 메모가 필요하다는 무서운 괴담</li>\n</ul>","frontmatter":{"slug":"/blog/monthly-log/2024-07","date":"2024년 8월 27일","title":"7월 한달동안 로그","subtitle":"찾아보고, 읽어보고, 적어두기","tags":["log"]}}},"pageContext":{"id":"1f94527d-3de8-5a50-b481-0736e9179e31","frontmatter__slug":"/blog/monthly-log/2024-07","__params":{"frontmatter__slug":"blog"}}},"staticQueryHashes":["3000541721","3293771174"],"slicesMap":{}}