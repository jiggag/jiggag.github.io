{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/blog/monthly-log/2024-11/","result":{"data":{"markdownRemark":{"html":"<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EB%B2%88%EC%97%AD-shadcnui-%EC%9D%98-%ED%95%B4%EB%B6%80\">[번역] shadcn/ui 의 해부</a></li>\n<li><a href=\"#%EB%B2%88%EC%97%AD-css-content-visibility%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4-%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%84%B1%EB%8A%A5-%ED%96%A5%EC%83%81-%EC%8B%9C%ED%82%A4%EA%B8%B0\">(번역) CSS content-visibility를 이용해 렌더링 성능 향상 시키기</a></li>\n<li><a href=\"#%EB%B2%88%EC%97%AD-%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%A7%80%EC%97%B0%EC%9D%84-%EA%B0%9C%EC%84%A0%ED%95%B4-lcp-%EC%A0%90%EC%88%98-%ED%96%A5%EC%83%81%ED%95%98%EA%B8%B0\">(번역) 렌더링 지연을 개선해 LCP 점수 향상하기</a></li>\n<li><a href=\"#%EB%B2%88%EC%97%AD-%EC%9B%B9-%ED%8E%98%EC%9D%B4%EC%A7%80%EA%B0%80-%EB%A1%9C%EB%93%9C%EB%90%98%EA%B8%B0-%EC%A0%84%EC%97%90-%EB%8D%94-%EB%B9%A0%EB%A5%B4%EA%B2%8C-%EB%A7%8C%EB%93%9C%EB%8A%94-%EB%B0%A9%EB%B2%95\">(번역) 웹 페이지가 로드되기 전에 더 빠르게 만드는 방법</a></li>\n</ul>\n</div>\n<h3 id=\"번역-shadcnui-의-해부\" style=\"position:relative;\"><a href=\"#%EB%B2%88%EC%97%AD-shadcnui-%EC%9D%98-%ED%95%B4%EB%B6%80\" aria-label=\"번역 shadcnui 의 해부 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://siosio3103.medium.com/shadcn-ui-%EC%9D%98-%ED%95%B4%EB%B6%80-ebd469c34614\">[번역] shadcn/ui 의 해부</a></h3>\n<ul>\n<li>이 글에서 읽고 새롭게 생각하게 된 내용이 있다</li>\n<li>우선 이 라이브러리는 알지 못한다</li>\n<li>이 글에서 설명해주듯 npm 패키지가 아닌 cli로 직접 소스코드를 받아야한다는 부분이 다른 라이브러리와의 차이점으로 보인다</li>\n<li>그럼 왜 이러한 차이점을 두었을까? 하는 생각이 이어진다\n<ul>\n<li>npm을 싫어하나…?</li>\n<li>또는 직접 받도록 하면서 얻을 수 있는 이점이 있나..?</li>\n</ul>\n</li>\n<li>그 이유는 정말 생각하지 못했다\n<ul>\n<li><code>이는 코드에 대한 소유권과 제어권을 사용자에게 부여하여, 사용자가 컴포넌트의 빌드 및 스타일을 직접 결정할 수 있도록 하기 위함입니다.</code></li>\n<li><code>적절한 기본값으로 시작한 뒤 필요에 따라 컴포넌트들을 커스텀할 수 있습니다.</code></li>\n<li><code>npm 패키지로 컴포넌트들을 패키징할 때 단점 중 하나는 스타일과 구현이 결합이 되어있는 것입니다. 컴포넌트의 디자인과 구현은 분리되어야 합니다.</code></li>\n</ul>\n</li>\n<li>😯</li>\n<li>보통 라이브러리를 받고 확장하고 싶은 경우가 있다면 소스코드를 직접 수정하기 위한 <code>patch-package</code> 와 같은 작업이 필요하다</li>\n<li>그러나 이 라이브러리의 제작자는 사용자에게 이 권한을 처음부터 부여하고자 하였다</li>\n<li>UI 라이브러리이고 결국 사용자가 직접 사용하고 싶은 방향대로 커스텀 하게 될 것이다</li>\n<li>그런데 이를 제한하는 방식으로 제공할 필요가 없었던 것이다</li>\n</ul>\n<h3 id=\"번역-css-content-visibility를-이용해-렌더링-성능-향상-시키기\" style=\"position:relative;\"><a href=\"#%EB%B2%88%EC%97%AD-css-content-visibility%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4-%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%84%B1%EB%8A%A5-%ED%96%A5%EC%83%81-%EC%8B%9C%ED%82%A4%EA%B8%B0\" aria-label=\"번역 css content visibility를 이용해 렌더링 성능 향상 시키기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://velog.io/@superlipbalm/improving-rendering-performance-with-css-content-visibility\">(번역) CSS content-visibility를 이용해 렌더링 성능 향상 시키기</a></h3>\n<ul>\n<li>뷰포트 안에 들어온 영역만 렌더링 하거나 DOM을 제어할 수 있다면 좋을텐데\n<ul>\n<li>기본적으로 지원하는 CSS가 이미 있다</li>\n</ul>\n</li>\n<li><code>content-visibility</code> 를 설정하면 레이아웃과 페인트 관점에서 뷰포트에 들어온 경우만 작업하므로 이 비용을 줄일 수 있다\n<ul>\n<li>DOM 자체를 새로 그리는 것은 아니라 뷰포트 인/아웃 되었을때 비용이 크지 않다</li>\n</ul>\n</li>\n<li>기본 지원이기 때문에 더 심화된 최적화를 하고 싶다면 추가 작업이 필요하겠지만\n<ul>\n<li>웹에서 VirtualizedList 를 간단하게 구현한다는 의미 정도</li>\n</ul>\n</li>\n<li><a href=\"https://wit.nts-corp.com/2020/09/11/6223\">참고: (번역) 랜더링 성능을 향상 시키는 새로운 CSS 속성 content-visibility</a>\n<ul>\n<li><code>content-visibility를 통해 화면 내 콘텐츠의 스타일과 레이아웃 작업을 진행합니다.</code></li>\n<li><code>하지만 요소가 완전히 화면 밖에 있는 경우라면 브라우저는 오직 해당 요소 박스의 스타일과 레이아웃만 처리하고 다른 렌더링 작업은 생략합니다.</code></li>\n<li><code>이 페이지의 로딩 성능은 마치 화면 내 콘텐츠 전부와 화면 밖 콘텐츠는 빈 상자만 로딩 하는 것과 같습니다.</code></li>\n<li><a href=\"https://web.dev/blog/css-content-visibility-baseline?hl=ko\">참고: CSS content-visibility 속성이 이제 기준으로 새로 제공됨</a></li>\n<li><a href=\"https://web.dev/articles/content-visibility?hl=ko\">참고: 콘텐츠 가시성: 렌더링 성능을 향상시키는 새로운 CSS 속성</a></li>\n<li>뷰포트 밖에서는 비어있는 상자를 그려두어 스크롤이 갑자기 튀는 문제를 해결한다 👍\n<ul>\n<li>직접 최적화 로직을 작성했는데, 이 구현이 되어있지 않아 프레임이 밀렸을때 스크롤이 튀는 현상을 겪었었다</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"번역-렌더링-지연을-개선해-lcp-점수-향상하기\" style=\"position:relative;\"><a href=\"#%EB%B2%88%EC%97%AD-%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%A7%80%EC%97%B0%EC%9D%84-%EA%B0%9C%EC%84%A0%ED%95%B4-lcp-%EC%A0%90%EC%88%98-%ED%96%A5%EC%83%81%ED%95%98%EA%B8%B0\" aria-label=\"번역 렌더링 지연을 개선해 lcp 점수 향상하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://velog.io/@superlipbalm/lcp-render-delay\">(번역) 렌더링 지연을 개선해 LCP 점수 향상하기</a></h3>\n<ul>\n<li><a href=\"https://www.debugbear.com/docs/metrics/largest-contentful-paint\">LCP (Largest Contentful Paint)</a>\n<ul>\n<li>웹에서 2.5s 정도를 Good 으로 평가하는데 (4s 넘어가면 Pooooooor…..)</li>\n<li>앱에서는 더 빠른 시간 내에 완료되어야 한다\n<ul>\n<li>웹에서는 로딩 상태가 상태바에 스피너 등 어느정도 사용자들이 학습되어있어 4s 라는 최대값이 있는게 아닐까</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"https://www.debugbear.com/blog/lcp-subparts\">LCP 를 향상시키기 위해 렌더링이 지연되는 것을 해소해야하는데</a>\n<ul>\n<li>렌더링 지연: 최종적으로 화면에 요소들이 노출되는 시간</li>\n</ul>\n</li>\n<li>렌더링 지연이 되는 원인이 무엇일까?\n<ul>\n<li>단순히 DOM이 준비 되지 않았거나</li>\n<li>비용이 큰 렌더링을 준비하고 있는 등</li>\n<li>렌더링을 지휘하는 메인 스레드가 바쁜 경우 렌더링이 지연 될 수 밖에 없다</li>\n</ul>\n</li>\n<li>렌더링 준비가 완료 되었음에도 화면에 노출되지 않고 숨겨져 있는 경우\n<ul>\n<li>예를 들면 화면 진입 시 애니메이션 효과와 함께 노출하기 위해 숨겨둔 경우</li>\n<li>전환 애니메이션을 포기하고 페이지 속도를 개선하는 타협이 필요하다 🙏</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"번역-웹-페이지가-로드되기-전에-더-빠르게-만드는-방법\" style=\"position:relative;\"><a href=\"#%EB%B2%88%EC%97%AD-%EC%9B%B9-%ED%8E%98%EC%9D%B4%EC%A7%80%EA%B0%80-%EB%A1%9C%EB%93%9C%EB%90%98%EA%B8%B0-%EC%A0%84%EC%97%90-%EB%8D%94-%EB%B9%A0%EB%A5%B4%EA%B2%8C-%EB%A7%8C%EB%93%9C%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"번역 웹 페이지가 로드되기 전에 더 빠르게 만드는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://ykss.netlify.app/translation/how_to_make_your_web_page_faster_before_it_even_loads/\">(번역) 웹 페이지가 로드되기 전에 더 빠르게 만드는 방법</a></h3>\n<ul>\n<li>웹 바이탈: 사용자가 페이지에서 유의미한 콘텐츠를 소비하거나 상호작용 할 수 있는지를 측정한다\n<ul>\n<li>First Contentful Paint (FCP): 사용자가 페이지에 처음 진입한 시점부터 페이지의 어떤 부분의 콘텐츠가 렌더링 될 때까지의 시간을 측정합니다.</li>\n<li>Largest Contentful Paint (LCP): 페이지의 주요 콘텐츠가 로드된 시점을 나타냅니다.</li>\n<li>Interaction to Next Paint (INP): 웹 페이지가 사용자 입력에 얼마나 빠르게 반응하는지를 측정합니다.</li>\n</ul>\n</li>\n<li>이러한 유의미한 콘텐츠가 더 빨리 로드되도록 최적화 작업을 하게 되는데\n<ul>\n<li>가장 첫번째 측정 지표인 FCP 를 줄일 수 있다면 어느 한부분이라도 사용자에게 콘텐츠를 전달할 수 있게 된다</li>\n<li>그렇다면 이 FCP 전에 어떤 일이 일어나는지 먼저 알아야한다</li>\n<li><code>웹 페이지 성능 최적화라고 하면 대부분 페이지 로딩 후의 성능에 집중하는 경향이 있습니다. 하지만 이 글에서는 그 관점을 뒤집어 새로운 인사이트를 제공합니다. 저자는 첫 바이트가 도달하기 전 단계의 최적화에 주목하며…</code></li>\n<li><a href=\"https://ykss.netlify.app/translation/how_to_make_your_web_page_faster_before_it_even_loads/#%EC%9B%B9-%ED%8E%98%EC%9D%B4%EC%A7%80%EA%B0%80-%EB%A1%9C%EB%93%9C%EB%90%98%EA%B8%B0-%EC%A0%84%EC%97%90-%EB%AC%B4%EC%8A%A8-%EC%9D%BC%EC%9D%B4-%EC%9D%BC%EC%96%B4%EB%82%A0%EA%B9%8C%EC%9A%94\">웹 페이지가 로드되기 전에 무슨 일이 일어날까요?</a></li>\n</ul>\n</li>\n<li>워터폴로 요청하는 것을 최소화하고 짧더라도 캐시는 캐시의 역할을 잘 해준다</li>\n</ul>","frontmatter":{"slug":"/blog/monthly-log/2024-11","date":"2024년 12월 19일","title":"11월 한달동안 로그","subtitle":"찾아보고, 읽어보고, 적어두기","tags":["log"]}}},"pageContext":{"id":"50c52067-e46e-569b-a69f-466300a4b66a","frontmatter__slug":"/blog/monthly-log/2024-11","__params":{"frontmatter__slug":"blog"}}},"staticQueryHashes":["3000541721","3293771174"]}