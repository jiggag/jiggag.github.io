{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/blog/monthly-log/2025-03/","result":{"data":{"markdownRemark":{"html":"<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EB%B2%88%EC%97%AD-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%97%90%EC%84%9C-%EA%B8%B4-%EC%9E%91%EC%97%85%EC%9D%84-%EB%B6%84%ED%95%A0%ED%95%98%EB%8A%94-%EB%8B%A4%EC%96%91%ED%95%9C-%EB%B0%A9%EB%B2%95\"><strong>(번역) 자바스크립트에서 긴 작업을 분할하는 다양한 방법</strong></a></li>\n<li><a href=\"#%EB%B2%88%EC%97%AD-create-react-app-%EC%A7%80%EC%9B%90-%EC%A4%91%EB%8B%A8-%EC%95%88%EB%82%B4\"><strong>(번역) Create-React-App 지원 중단 안내</strong></a></li>\n<li><a href=\"#%EB%B2%88%EC%97%AD-%EB%A6%AC%EC%95%A1%ED%8A%B8-19-forwardref-%EC%A7%80%EC%9B%90-%EC%A4%91%EB%8B%A8-%EC%95%9E%EC%9C%BC%EB%A1%9C-ref%EB%A5%BC-%EC%A0%84%EB%8B%AC%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-%ED%91%9C%EC%A4%80-%EA%B0%80%EC%9D%B4%EB%93%9C\"><strong>[번역] 리액트 19 forwardRef 지원 중단: 앞으로 ref를 전달하기 위한 표준 가이드</strong></a></li>\n<li><a href=\"#%EB%B2%88%EC%97%AD-%EC%97%90%ED%8F%AC%ED%81%AC-%EC%8B%9C%EB%A7%A8%ED%8B%B1-%EB%B2%84%EC%A0%84epoch-semantic-versioning\"><strong>[번역] 에포크 시맨틱 버전(Epoch Semantic Versioning)</strong></a></li>\n</ul>\n</div>\n<h3 id=\"번역-자바스크립트에서-긴-작업을-분할하는-다양한-방법\" style=\"position:relative;\"><a href=\"#%EB%B2%88%EC%97%AD-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%97%90%EC%84%9C-%EA%B8%B4-%EC%9E%91%EC%97%85%EC%9D%84-%EB%B6%84%ED%95%A0%ED%95%98%EB%8A%94-%EB%8B%A4%EC%96%91%ED%95%9C-%EB%B0%A9%EB%B2%95\" aria-label=\"번역 자바스크립트에서 긴 작업을 분할하는 다양한 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://ykss.netlify.app/translation/there_are_a_lot_of_ways_to_break_up_long_tasks_in_javascript\"><strong>(번역) 자바스크립트에서 긴 작업을 분할하는 다양한 방법</strong></a></h3>\n<ul>\n<li>메인 스레드에서 길고 부하가 큰 작업을 실행할때\n<ul>\n<li>큰 작업을 이벤트 루프의 여러 틱에 걸쳐 주기적으로 분할하는 것</li>\n<li>그 중간중간 다른 작업을 실행할 수 있도록</li>\n</ul>\n</li>\n<li>가장 자주 접했던 방법 setTimeout을 반복 하는 것\n<ul>\n<li>setTimeout으로 실행한 콜백은 매크로태스크 큐에 쌓이고 이벤트 루프 돌면서 실행할 수 있기 때문에 분할되는데</li>\n<li>setTimeout 안에서 재귀로 호출하게 되면 일정 주기로 작게 분할된 작업을 실행하도록 할 수 있다</li>\n</ul>\n</li>\n<li>async/await + Promise로 분할\n<ul>\n<li>큰 작업 중간에 단순하게 Promise로 대기하는 로직을 추가한다</li>\n<li><code>await new Promise(resolve => setTimeout(resolve, 0))</code></li>\n<li>Promise의 resolve는 마이크로태스크 큐에 쌓이기 때문에 다음 이벤트 루프에서 실행된다</li>\n<li><code>다음 이벤트 루프 사이클로 넘겨라</code> 하는 의미\n<ul>\n<li><code>await</code>를 만나면 작업하던 것을 멈추고 이벤트 루프에게 권한을 넘긴다</li>\n<li><code>setTimtout(resolve, 0)</code> 을 다음에 실행할 매크로태스크 큐 넣어두고</li>\n<li>Promise의 콜백을 마이크로태스크에서 꺼내 실행하고 다음 매크로태스크에 들어가며 resolve까지 실행되는 순서</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>setTimeout과 Promise 각각의 큐\n<ul>\n<li><a href=\"https://velog.io/@yejineee/%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%A3%A8%ED%94%84%EC%99%80-%ED%83%9C%EC%8A%A4%ED%81%AC-%ED%81%90-%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C-%ED%83%9C%EC%8A%A4%ED%81%AC-%EB%A7%A4%ED%81%AC%EB%A1%9C-%ED%83%9C%EC%8A%A4%ED%81%AC-g6f0joxx\">매크로태스크 vs 마이크로태스크</a></li>\n<li>이벤트 루프 돌면서 콜스택이 비어있을때 마이크로태스크 모두 실행되고 그 다음 매크로태스크가 실행된다</li>\n<li>그렇다면 먼저 실행되어야하는 것이 있다면 <code>Promise.then</code> 을 사용하고 그 다음 순위로 실행될 작업에 <code>setTimeout</code> 을 해주면 된다</li>\n</ul>\n</li>\n<li>분할하다보니 requestAnimationFrame가 떠오르는데\n<ul>\n<li><code>브라우저의 화면 갱신 주기와 동기화하여 작업을 예약하도록 설계되었습니다</code></li>\n<li><code>콜백은 항상 다음 화면이 렌더링 되기 직전에 실행</code></li>\n<li>렌더링 애니메이션 프레임 단위로 실행되는 requestAnimationFrame는 화면 끊김 없이 UI 작업이 진행되어야하는 경우</li>\n<li>setTimeout은 순서는 중요하지 않으며 무거운 비동기 작업을 분할하여 실행해야하는 경우</li>\n</ul>\n</li>\n<li>그렇다면 화면 끊김 없이 무거운 비동기 동작을 필요로한다면…\n<ul>\n<li>requestAnimationFrame만으로는 문제가 발생한다\n<ul>\n<li><code>그러나 화면 갱신 주기에 맞춰 무거운 작업을 실행하면 렌더링 성능이 저하될 수도 있습니다.</code></li>\n<li>화면 갱신 주기와 동일하게 항상 실행되고 있으니 오히려 무거운 작업을 실행했을때 렌더링이 되지 않은 상태로 대기하는 것</li>\n</ul>\n</li>\n<li>requestAnimationFrame와 setTimeout 을 조합해야하는데</li>\n<li>어떤 형태가 되어야할까? requestAnimationFrame(setTimeout)</li>\n<li>화면끊김이 우선이니 🤔</li>\n</ul>\n</li>\n<li>항상 작업 분리를 하다보면 웹 워커에 도달하게 되는데\n<ul>\n<li>리액네에는 존재하지 않다보니 금방 패스 하게 된다</li>\n<li>브릿지 모듈로 네이티브를 다녀오거나</li>\n<li>렌더링 퍼포먼스는 극악의 최적화를 해야한다</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"번역-create-react-app-지원-중단-안내\" style=\"position:relative;\"><a href=\"#%EB%B2%88%EC%97%AD-create-react-app-%EC%A7%80%EC%9B%90-%EC%A4%91%EB%8B%A8-%EC%95%88%EB%82%B4\" aria-label=\"번역 create react app 지원 중단 안내 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://medium.com/@jiwoochoics/%EB%B2%88%EC%97%AD-create-react-app-%EC%A7%80%EC%9B%90-%EC%A4%91%EB%8B%A8-%EC%95%88%EB%82%B4-55c995cb9a59\"><strong>(번역) Create-React-App 지원 중단 안내</strong></a></h3>\n<ul>\n<li>처음 리액트를 공부하기 시작했을때\n<ul>\n<li>우선 고고 를 외치면 프로젝트 만들때 사용했던 CRA</li>\n<li>이게 프레임워크 인줄 알았다</li>\n<li>적절하게 프로젝트 환경이 구성되어있었기에</li>\n<li>리액트 = CRA = 프레임워크 라는 흐름으로 🏄</li>\n</ul>\n</li>\n<li><code>이러한 문제를 해결하기 위해 사용자는 결국 CRA 위에 자신만의 맞춤형 솔루션을 구축하게 되는데, 이는 원래 CRA가 해결하고자 했던 문제이기도 합니다.</code>\n<ul>\n<li>프레임워크를 사용함으로써 얻을 수 이점이 있는데</li>\n<li>프로젝트마다 요구하는 구성이 다르기에 각각 자신만의 프레임워크를 구축하게 되지 않을까</li>\n<li>모든 곳에 완벽한 것은 없으니 계속 다양한 성격의 진화를 하게 되는듯</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"번역-리액트-19-forwardref-지원-중단-앞으로-ref를-전달하기-위한-표준-가이드\" style=\"position:relative;\"><a href=\"#%EB%B2%88%EC%97%AD-%EB%A6%AC%EC%95%A1%ED%8A%B8-19-forwardref-%EC%A7%80%EC%9B%90-%EC%A4%91%EB%8B%A8-%EC%95%9E%EC%9C%BC%EB%A1%9C-ref%EB%A5%BC-%EC%A0%84%EB%8B%AC%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-%ED%91%9C%EC%A4%80-%EA%B0%80%EC%9D%B4%EB%93%9C\" aria-label=\"번역 리액트 19 forwardref 지원 중단 앞으로 ref를 전달하기 위한 표준 가이드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://siosio3103.medium.com/%EB%B2%88%EC%97%AD-%EB%A6%AC%EC%95%A1%ED%8A%B8-19-forwardref-%EC%A7%80%EC%9B%90-%EC%A4%91%EB%8B%A8-%EC%95%9E%EC%9C%BC%EB%A1%9C-ref%EB%A5%BC-%EC%A0%84%EB%8B%AC%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-%ED%91%9C%EC%A4%80-%EA%B0%80%EC%9D%B4%EB%93%9C-13c02855efd8\"><strong>[번역] 리액트 19 forwardRef 지원 중단: 앞으로 ref를 전달하기 위한 표준 가이드</strong></a></h3>\n<ul>\n<li>ref를 전달하고 이를 전달 받기 위해 forwardRef를 사용했는데 이게 없어진다고?\n<ul>\n<li><code>표준 프로퍼티로 ref를 직접 전달</code></li>\n<li><code>컴포넌트 아키텍처를 간소화하고 보일러플레이트 코드를 줄이고자</code></li>\n<li>🥳 ref > forwardRef > ref…</li>\n<li>보일러 플레이트를 줄인다는 것에 감동</li>\n</ul>\n</li>\n<li>그럼 리액트 19에서는 이걸 어떻게 접근할 것인가?\n<ul>\n<li>ref를 다른 props와 동일하게 사용한다</li>\n<li>🤔 왜인지 속상하다</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"번역-에포크-시맨틱-버전epoch-semantic-versioning\" style=\"position:relative;\"><a href=\"#%EB%B2%88%EC%97%AD-%EC%97%90%ED%8F%AC%ED%81%AC-%EC%8B%9C%EB%A7%A8%ED%8B%B1-%EB%B2%84%EC%A0%84epoch-semantic-versioning\" aria-label=\"번역 에포크 시맨틱 버전epoch semantic versioning permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://velog.io/@superlipbalm/epoch-semver\"><strong>[번역] 에포크 시맨틱 버전(Epoch Semantic Versioning)</strong></a></h3>\n<ul>\n<li>시맨틱 앞에 더 있다니!</li>\n<li><code>MAJOR.MINOR.PATCH</code>\n<ul>\n<li><code>업그레이드 시 호환성과 안정성을 보장하기 위한 라이브러리 관리자와 사용자 간의 **계약</code>**</li>\n<li>어떤 버전이 올라갔는지를 보고 어떤 목적의 업데이트가 이뤄진건지 추측할 수 있다는 것</li>\n</ul>\n</li>\n<li><code>{EPOCH * 1000 + MAJOR}.MINOR.PATCH</code>\n<ul>\n<li>메이저의 단계를 분할하여 조금 충격적이 것을 에포크 버전으로 올리자는 것인데…</li>\n<li>같은 의미로 쓰이던 메이저 버전을 조금 더 세분화 하는 느낌이라</li>\n<li>충격적인 의미를 전달하는 목적이라면</li>\n<li>버전 범핑이 1, 2, 3 순서대로가 아니라 1, 2, 10, 20 이런식으로 가도 되는 것 아닌가?</li>\n<li>그게 바로 에포크 인가</li>\n</ul>\n</li>\n</ul>","frontmatter":{"slug":"/blog/monthly-log/2025-03","date":"2025년 4월 17일","title":"3월 한달동안 로그","subtitle":"찾아보고, 읽어보고, 적어두기","tags":["log"]}}},"pageContext":{"id":"60911dd7-c691-582d-ac0c-22996334a4f9","frontmatter__slug":"/blog/monthly-log/2025-03","__params":{"frontmatter__slug":"blog"}}},"staticQueryHashes":["3000541721","3293771174"]}